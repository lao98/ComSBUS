
RF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052fc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800564c  0800564c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005654  08005654  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  080056cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080056cc  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d33c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2f  00000000  00000000  0002d3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002f210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002773a  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5e9  00000000  00000000  00057a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b01  00000000  00000000  00062ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155afc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  00155b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080054e4 	.word	0x080054e4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080054e4 	.word	0x080054e4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fcce 	bl	8000f7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f90d 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa13 	bl	8000a10 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 f9df 	bl	80009ac <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 f975 	bl	80008dc <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80005f2:	f000 f9ab 	bl	800094c <MX_USART6_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  memset(data_original,0,26);
 80005f6:	221a      	movs	r2, #26
 80005f8:	2100      	movs	r1, #0
 80005fa:	4873      	ldr	r0, [pc, #460]	; (80007c8 <main+0x1f0>)
 80005fc:	f004 f814 	bl	8004628 <memset>
	  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_original, 26);
 8000600:	221a      	movs	r2, #26
 8000602:	4971      	ldr	r1, [pc, #452]	; (80007c8 <main+0x1f0>)
 8000604:	4871      	ldr	r0, [pc, #452]	; (80007cc <main+0x1f4>)
 8000606:	f002 fe0c 	bl	8003222 <HAL_UART_Receive_DMA>
	  HAL_Delay(30);
 800060a:	201e      	movs	r0, #30
 800060c:	f000 fd14 	bl	8001038 <HAL_Delay>
	  for(int i=0;i<26;i++){
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e00b      	b.n	800062e <main+0x56>
		  rec_sbus_data[i]=data_original[i+1];
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	4a6b      	ldr	r2, [pc, #428]	; (80007c8 <main+0x1f0>)
 800061c:	5cd1      	ldrb	r1, [r2, r3]
 800061e:	4a6c      	ldr	r2, [pc, #432]	; (80007d0 <main+0x1f8>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	460a      	mov	r2, r1
 8000626:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<26;i++){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b19      	cmp	r3, #25
 8000632:	ddf0      	ble.n	8000616 <main+0x3e>
	  }

	  printf("R %s\n",(char*)rec_sbus_data);
 8000634:	4966      	ldr	r1, [pc, #408]	; (80007d0 <main+0x1f8>)
 8000636:	4867      	ldr	r0, [pc, #412]	; (80007d4 <main+0x1fc>)
 8000638:	f003 fffe 	bl	8004638 <iprintf>
	  if(rec_sbus_data[0]==15){
 800063c:	4b64      	ldr	r3, [pc, #400]	; (80007d0 <main+0x1f8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	f040 8086 	bne.w	8000752 <main+0x17a>
		  sbus_channel[0]  = ((rec_sbus_data[1]|rec_sbus_data[2]<<8) & 0x07FF);
 8000646:	4b62      	ldr	r3, [pc, #392]	; (80007d0 <main+0x1f8>)
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	461a      	mov	r2, r3
 800064c:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <main+0x1f8>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	4313      	orrs	r3, r2
 8000654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000658:	4a5f      	ldr	r2, [pc, #380]	; (80007d8 <main+0x200>)
 800065a:	6013      	str	r3, [r2, #0]
		  sbus_channel[1]  = ((rec_sbus_data[2]>>3 |rec_sbus_data[3]<<5)                 & 0x07FF);
 800065c:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <main+0x1f8>)
 800065e:	789b      	ldrb	r3, [r3, #2]
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	4b5a      	ldr	r3, [pc, #360]	; (80007d0 <main+0x1f8>)
 8000668:	78db      	ldrb	r3, [r3, #3]
 800066a:	015b      	lsls	r3, r3, #5
 800066c:	4313      	orrs	r3, r2
 800066e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000672:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <main+0x200>)
 8000674:	6053      	str	r3, [r2, #4]
		  sbus_channel[2]  = ((rec_sbus_data[3]>>6 |rec_sbus_data[4]<<2 |rec_sbus_data[5]<<10)  & 0x07FF);
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <main+0x1f8>)
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	099b      	lsrs	r3, r3, #6
 800067c:	b2db      	uxtb	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <main+0x1f8>)
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	431a      	orrs	r2, r3
 8000688:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <main+0x1f8>)
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	029b      	lsls	r3, r3, #10
 800068e:	4313      	orrs	r3, r2
 8000690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000694:	4a50      	ldr	r2, [pc, #320]	; (80007d8 <main+0x200>)
 8000696:	6093      	str	r3, [r2, #8]
		  sbus_channel[3]  = ((rec_sbus_data[5]>>1 |rec_sbus_data[6]<<7)                 & 0x07FF);
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <main+0x1f8>)
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <main+0x1f8>)
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	01db      	lsls	r3, r3, #7
 80006a8:	4313      	orrs	r3, r2
 80006aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006ae:	4a4a      	ldr	r2, [pc, #296]	; (80007d8 <main+0x200>)
 80006b0:	60d3      	str	r3, [r2, #12]
		  sbus_channel[4]  = ((rec_sbus_data[6]>>4 |rec_sbus_data[7]<<4)                 & 0x07FF);
 80006b2:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <main+0x1f8>)
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	091b      	lsrs	r3, r3, #4
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <main+0x1f8>)
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	4313      	orrs	r3, r2
 80006c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006c8:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <main+0x200>)
 80006ca:	6113      	str	r3, [r2, #16]
		  sbus_channel[5]  = ((rec_sbus_data[7]>>7 |rec_sbus_data[8]<<1 |rec_sbus_data[9]<<9)   & 0x07FF);
 80006cc:	4b40      	ldr	r3, [pc, #256]	; (80007d0 <main+0x1f8>)
 80006ce:	79db      	ldrb	r3, [r3, #7]
 80006d0:	09db      	lsrs	r3, r3, #7
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <main+0x1f8>)
 80006d8:	7a1b      	ldrb	r3, [r3, #8]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	431a      	orrs	r2, r3
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <main+0x1f8>)
 80006e0:	7a5b      	ldrb	r3, [r3, #9]
 80006e2:	025b      	lsls	r3, r3, #9
 80006e4:	4313      	orrs	r3, r2
 80006e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006ea:	4a3b      	ldr	r2, [pc, #236]	; (80007d8 <main+0x200>)
 80006ec:	6153      	str	r3, [r2, #20]
		  sbus_channel[6]  = ((rec_sbus_data[9]>>2 |rec_sbus_data[10]<<6)                & 0x07FF);
 80006ee:	4b38      	ldr	r3, [pc, #224]	; (80007d0 <main+0x1f8>)
 80006f0:	7a5b      	ldrb	r3, [r3, #9]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b35      	ldr	r3, [pc, #212]	; (80007d0 <main+0x1f8>)
 80006fa:	7a9b      	ldrb	r3, [r3, #10]
 80006fc:	019b      	lsls	r3, r3, #6
 80006fe:	4313      	orrs	r3, r2
 8000700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000704:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <main+0x200>)
 8000706:	6193      	str	r3, [r2, #24]
		  sbus_channel[7]  = ((rec_sbus_data[10]>>5|rec_sbus_data[11]<<3)                & 0x07FF);
 8000708:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <main+0x1f8>)
 800070a:	7a9b      	ldrb	r3, [r3, #10]
 800070c:	095b      	lsrs	r3, r3, #5
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	4b2f      	ldr	r3, [pc, #188]	; (80007d0 <main+0x1f8>)
 8000714:	7adb      	ldrb	r3, [r3, #11]
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4313      	orrs	r3, r2
 800071a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800071e:	4a2e      	ldr	r2, [pc, #184]	; (80007d8 <main+0x200>)
 8000720:	61d3      	str	r3, [r2, #28]
		  sbus_channel[8]  = ((rec_sbus_data[12]   |rec_sbus_data[13]<<8)                & 0x07FF);
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <main+0x1f8>)
 8000724:	7b1b      	ldrb	r3, [r3, #12]
 8000726:	461a      	mov	r2, r3
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <main+0x1f8>)
 800072a:	7b5b      	ldrb	r3, [r3, #13]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	4313      	orrs	r3, r2
 8000730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000734:	4a28      	ldr	r2, [pc, #160]	; (80007d8 <main+0x200>)
 8000736:	6213      	str	r3, [r2, #32]
		  sbus_channel[9]  = ((rec_sbus_data[13]>>3|rec_sbus_data[14]<<5)                & 0x07FF);
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <main+0x1f8>)
 800073a:	7b5b      	ldrb	r3, [r3, #13]
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <main+0x1f8>)
 8000744:	7b9b      	ldrb	r3, [r3, #14]
 8000746:	015b      	lsls	r3, r3, #5
 8000748:	4313      	orrs	r3, r2
 800074a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800074e:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <main+0x200>)
 8000750:	6253      	str	r3, [r2, #36]	; 0x24
	  }
	  printf(" canal 1 %d\n ",sbus_channel[0]);
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <main+0x200>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <main+0x204>)
 800075a:	f003 ff6d 	bl	8004638 <iprintf>
	  printf(" canal 2 %d\n ",sbus_channel[1]);
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <main+0x200>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4619      	mov	r1, r3
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0x208>)
 8000766:	f003 ff67 	bl	8004638 <iprintf>
	  printf(" canal 3 %d\n ",sbus_channel[2]);
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <main+0x200>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4619      	mov	r1, r3
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <main+0x20c>)
 8000772:	f003 ff61 	bl	8004638 <iprintf>
	  printf(" canal 4 %d\n ",sbus_channel[3]);
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0x200>)
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	4619      	mov	r1, r3
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <main+0x210>)
 800077e:	f003 ff5b 	bl	8004638 <iprintf>
	  printf(" canal 5 %d\n ",sbus_channel[4]);
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <main+0x200>)
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	4619      	mov	r1, r3
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <main+0x214>)
 800078a:	f003 ff55 	bl	8004638 <iprintf>
	  printf(" canal 6 %d\n ",sbus_channel[5]);
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <main+0x200>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4619      	mov	r1, r3
 8000794:	4816      	ldr	r0, [pc, #88]	; (80007f0 <main+0x218>)
 8000796:	f003 ff4f 	bl	8004638 <iprintf>
	  printf(" canal 7 %d\n ",sbus_channel[6]);
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0x200>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4619      	mov	r1, r3
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <main+0x21c>)
 80007a2:	f003 ff49 	bl	8004638 <iprintf>
	  printf(" canal 8 %d\n ",sbus_channel[7]);
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <main+0x200>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <main+0x220>)
 80007ae:	f003 ff43 	bl	8004638 <iprintf>
	  printf(" canal 9 %d\n ",sbus_channel[8]);
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <main+0x200>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <main+0x224>)
 80007ba:	f003 ff3d 	bl	8004638 <iprintf>
	  HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 fc39 	bl	8001038 <HAL_Delay>
  {
 80007c6:	e716      	b.n	80005f6 <main+0x1e>
 80007c8:	200001dc 	.word	0x200001dc
 80007cc:	20000158 	.word	0x20000158
 80007d0:	200001f8 	.word	0x200001f8
 80007d4:	080054fc 	.word	0x080054fc
 80007d8:	20000214 	.word	0x20000214
 80007dc:	08005504 	.word	0x08005504
 80007e0:	08005514 	.word	0x08005514
 80007e4:	08005524 	.word	0x08005524
 80007e8:	08005534 	.word	0x08005534
 80007ec:	08005544 	.word	0x08005544
 80007f0:	08005554 	.word	0x08005554
 80007f4:	08005564 	.word	0x08005564
 80007f8:	08005574 	.word	0x08005574
 80007fc:	08005584 	.word	0x08005584

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2234      	movs	r2, #52	; 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f003 ff0a 	bl	8004628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <SystemClock_Config+0xd4>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <SystemClock_Config+0xd4>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <SystemClock_Config+0xd4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SystemClock_Config+0xd8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <SystemClock_Config+0xd8>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <SystemClock_Config+0xd8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800086c:	23d8      	movs	r3, #216	; 0xd8
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fb15 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800088c:	f000 f902 	bl	8000a94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000890:	f001 fabe 	bl	8001e10 <HAL_PWREx_EnableOverDrive>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089a:	f000 f8fb 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2107      	movs	r1, #7
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fda5 	bl	800240c <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008c8:	f000 f8e4 	bl	8000a94 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3750      	adds	r7, #80	; 0x50
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_USART3_UART_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_USART3_UART_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_USART3_UART_Init+0x64>)
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <MX_USART3_UART_Init+0x6c>)
 80008ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_USART3_UART_Init+0x64>)
 80008ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USART3_UART_Init+0x64>)
 80008f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008fa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART3_UART_Init+0x64>)
 80008fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000902:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART3_UART_Init+0x64>)
 8000906:	2204      	movs	r2, #4
 8000908:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_USART3_UART_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART3_UART_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_USART3_UART_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x64>)
 800091e:	2202      	movs	r2, #2
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_USART3_UART_Init+0x64>)
 8000924:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART3_UART_Init+0x64>)
 800092c:	f002 fb98 	bl	8003060 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
 8000936:	f000 f8ad 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000158 	.word	0x20000158
 8000944:	40004800 	.word	0x40004800
 8000948:	000186a0 	.word	0x000186a0

0800094c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <MX_USART6_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART6_UART_Init+0x58>)
 8000990:	f002 fb66 	bl	8003060 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f000 f87b 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000023c 	.word	0x2000023c
 80009a8:	40011400 	.word	0x40011400

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_DMA_Init+0x60>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <MX_DMA_Init+0x60>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_DMA_Init+0x60>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_DMA_Init+0x60>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MX_DMA_Init+0x60>)
 80009d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_DMA_Init+0x60>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200c      	movs	r0, #12
 80009e8:	f000 fc25 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009ec:	200c      	movs	r0, #12
 80009ee:	f000 fc3e 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2039      	movs	r0, #57	; 0x39
 80009f8:	f000 fc1d 	bl	8001236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009fc:	2039      	movs	r0, #57	; 0x39
 80009fe:	f000 fc36 	bl	800126e <HAL_NVIC_EnableIRQ>

}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x5c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8000a78:	1d39      	adds	r1, r7, #4
 8000a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <__io_putchar+0x20>)
 8000a82:	f002 fb3b 	bl	80030fc <HAL_UART_Transmit>

  return ch;
 8000a86:	687b      	ldr	r3, [r7, #4]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000023c 	.word	0x2000023c

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0b0      	sub	sp, #192	; 0xc0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2290      	movs	r2, #144	; 0x90
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fd8d 	bl	8004628 <memset>
  if(huart->Instance==USART3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a79      	ldr	r2, [pc, #484]	; (8000cf8 <HAL_UART_MspInit+0x210>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d173      	bne.n	8000c00 <HAL_UART_MspInit+0x118>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fe72 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b32:	f7ff ffaf 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b36:	4b71      	ldr	r3, [pc, #452]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a70      	ldr	r2, [pc, #448]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b6e      	ldr	r3, [pc, #440]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4a:	61bb      	str	r3, [r7, #24]
 8000b4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b6b      	ldr	r3, [pc, #428]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a6a      	ldr	r2, [pc, #424]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b68      	ldr	r3, [pc, #416]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b80:	2307      	movs	r3, #7
 8000b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	485c      	ldr	r0, [pc, #368]	; (8000d00 <HAL_UART_MspInit+0x218>)
 8000b8e:	f000 ff93 	bl	8001ab8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000b92:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000b94:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <HAL_UART_MspInit+0x220>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000b98:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000b9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba0:	4b58      	ldr	r3, [pc, #352]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba6:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bac:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bba:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000bc0:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b4f      	ldr	r3, [pc, #316]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000bd2:	484c      	ldr	r0, [pc, #304]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bd4:	f000 fb66 	bl	80012a4 <HAL_DMA_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000bde:	f7ff ff59 	bl	8000a94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a47      	ldr	r2, [pc, #284]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000be6:	671a      	str	r2, [r3, #112]	; 0x70
 8000be8:	4a46      	ldr	r2, [pc, #280]	; (8000d04 <HAL_UART_MspInit+0x21c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2027      	movs	r0, #39	; 0x27
 8000bf4:	f000 fb1f 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bf8:	2027      	movs	r0, #39	; 0x27
 8000bfa:	f000 fb38 	bl	800126e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000bfe:	e076      	b.n	8000cee <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <HAL_UART_MspInit+0x224>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d171      	bne.n	8000cee <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000c0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c10:	2300      	movs	r3, #0
 8000c12:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fdf9 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8000c24:	f7ff ff36 	bl	8000a94 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a33      	ldr	r2, [pc, #204]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
 8000c34:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f003 0320 	and.w	r3, r3, #32
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_UART_MspInit+0x214>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c58:	23c0      	movs	r3, #192	; 0xc0
 8000c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c70:	2308      	movs	r3, #8
 8000c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	; (8000d10 <HAL_UART_MspInit+0x228>)
 8000c7e:	f000 ff1b 	bl	8001ab8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000c84:	4a24      	ldr	r2, [pc, #144]	; (8000d18 <HAL_UART_MspInit+0x230>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000c8a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cc4:	f000 faee 	bl	80012a4 <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_UART_MspInit+0x1ea>
      Error_Handler();
 8000cce:	f7ff fee1 	bl	8000a94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cd6:	671a      	str	r2, [r3, #112]	; 0x70
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_UART_MspInit+0x22c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2047      	movs	r0, #71	; 0x47
 8000ce4:	f000 faa7 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ce8:	2047      	movs	r0, #71	; 0x47
 8000cea:	f000 fac0 	bl	800126e <HAL_NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	37c0      	adds	r7, #192	; 0xc0
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400
 8000d04:	200000f8 	.word	0x200000f8
 8000d08:	40026028 	.word	0x40026028
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	40020800 	.word	0x40020800
 8000d14:	20000098 	.word	0x20000098
 8000d18:	40026428 	.word	0x40026428

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d68:	f000 f946 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <DMA1_Stream1_IRQHandler+0x10>)
 8000d76:	f000 fc35 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000f8 	.word	0x200000f8

08000d84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USART3_IRQHandler+0x10>)
 8000d8a:	f002 fa99 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  /* USER CODE END USART3_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000158 	.word	0x20000158

08000d98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA2_Stream1_IRQHandler+0x10>)
 8000d9e:	f000 fc21 	bl	80015e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000098 	.word	0x20000098

08000dac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <USART6_IRQHandler+0x10>)
 8000db2:	f002 fa85 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000023c 	.word	0x2000023c

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e009      	b.n	8000e20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60ba      	str	r2, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe2b 	bl	8000a70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf1      	blt.n	8000e0c <_write+0x12>
	}
	return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_close>:

int _close(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <_isatty>:

int _isatty(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
	return 1;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f003 fb82 	bl	80045d4 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20080000 	.word	0x20080000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	2000008c 	.word	0x2000008c
 8000f04:	200002d8 	.word	0x200002d8

08000f08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ffd7 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f003 fb41 	bl	80045e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fb3b 	bl	80005d8 <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f70:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 8000f74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f78:	200002d4 	.word	0x200002d4

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>

08000f7e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 f94c 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f88:	200f      	movs	r0, #15
 8000f8a:	f000 f805 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8e:	f7ff fd87 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f967 	bl	800128a <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f92f 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200002c0 	.word	0x200002c0

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002c0 	.word	0x200002c0

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	05fa0000 	.word	0x05fa0000

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff8e 	bl	8001120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff3e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff8e 	bl	8001174 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5d 	bl	8001120 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff31 	bl	80010e4 <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff feb6 	bl	8001020 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e099      	b.n	80013f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e0:	e00f      	b.n	8001302 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e2:	f7ff fe9d 	bl	8001020 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d908      	bls.n	8001302 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2220      	movs	r2, #32
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e078      	b.n	80013f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1e8      	bne.n	80012e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_DMA_Init+0x158>)
 800131c:	4013      	ands	r3, r2
 800131e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001346:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4313      	orrs	r3, r2
 8001352:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2b04      	cmp	r3, #4
 800135a:	d107      	bne.n	800136c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4313      	orrs	r3, r2
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	f023 0307 	bic.w	r3, r3, #7
 8001382:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4313      	orrs	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	2b04      	cmp	r3, #4
 8001394:	d117      	bne.n	80013c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00e      	beq.n	80013c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fb09 	bl	80019c0 <DMA_CheckFifoParam>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013c2:	2301      	movs	r3, #1
 80013c4:	e016      	b.n	80013f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fac0 	bl	8001954 <DMA_CalcBaseAndBitshift>
 80013d4:	4603      	mov	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	223f      	movs	r2, #63	; 0x3f
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	e010803f 	.word	0xe010803f

08001400 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_DMA_Start_IT+0x26>
 8001422:	2302      	movs	r3, #2
 8001424:	e048      	b.n	80014b8 <HAL_DMA_Start_IT+0xb8>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d137      	bne.n	80014aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2202      	movs	r2, #2
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fa52 	bl	80018f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	223f      	movs	r2, #63	; 0x3f
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0216 	orr.w	r2, r2, #22
 800146e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800147e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0208 	orr.w	r2, r2, #8
 8001496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e005      	b.n	80014b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
 80014b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ce:	f7ff fda7 	bl	8001020 <HAL_GetTick>
 80014d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e052      	b.n	8001598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0216 	bic.w	r2, r2, #22
 8001500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_DMA_Abort+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0208 	bic.w	r2, r2, #8
 8001530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001542:	e013      	b.n	800156c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fd6c 	bl	8001020 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d90c      	bls.n	800156c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e015      	b.n	8001598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e4      	bne.n	8001544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00c      	b.n	80015d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2205      	movs	r2, #5
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_DMA_IRQHandler+0x258>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a92      	ldr	r2, [pc, #584]	; (8001840 <HAL_DMA_IRQHandler+0x25c>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2208      	movs	r2, #8
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d01a      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2208      	movs	r2, #8
 800163e:	409a      	lsls	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2201      	movs	r2, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d012      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2201      	movs	r2, #1
 8001674:	409a      	lsls	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f043 0202 	orr.w	r2, r3, #2
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168a:	2204      	movs	r2, #4
 800168c:	409a      	lsls	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00b      	beq.n	80016bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2204      	movs	r2, #4
 80016aa:	409a      	lsls	r2, r3
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b4:	f043 0204 	orr.w	r2, r3, #4
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2210      	movs	r2, #16
 80016c2:	409a      	lsls	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d043      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03c      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2210      	movs	r2, #16
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d018      	beq.n	8001726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d108      	bne.n	8001714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	4798      	blx	r3
 8001712:	e01f      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01b      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e016      	b.n	8001754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0208 	bic.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2220      	movs	r2, #32
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 808e 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8086 	beq.w	8001882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2220      	movs	r2, #32
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b05      	cmp	r3, #5
 800178c:	d136      	bne.n	80017fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0216 	bic.w	r2, r2, #22
 800179c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <HAL_DMA_IRQHandler+0x1da>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0208 	bic.w	r2, r2, #8
 80017cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	223f      	movs	r2, #63	; 0x3f
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d07d      	beq.n	80018ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
        }
        return;
 80017fa:	e078      	b.n	80018ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d01c      	beq.n	8001844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d108      	bne.n	800182a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	2b00      	cmp	r3, #0
 800181e:	d030      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
 8001828:	e02b      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182e:	2b00      	cmp	r3, #0
 8001830:	d027      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
 800183a:	e022      	b.n	8001882 <HAL_DMA_IRQHandler+0x29e>
 800183c:	20000000 	.word	0x20000000
 8001840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0210 	bic.w	r2, r2, #16
 8001860:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d032      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d022      	beq.n	80018dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2205      	movs	r2, #5
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0201 	bic.w	r2, r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d307      	bcc.n	80018ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f2      	bne.n	80018ae <HAL_DMA_IRQHandler+0x2ca>
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
 80018ec:	e000      	b.n	80018f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018ee:	bf00      	nop
    }
  }
}
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop

080018f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b40      	cmp	r3, #64	; 0x40
 8001924:	d108      	bne.n	8001938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001936:	e007      	b.n	8001948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	60da      	str	r2, [r3, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3b10      	subs	r3, #16
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <DMA_CalcBaseAndBitshift+0x60>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d908      	bls.n	8001994 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <DMA_CalcBaseAndBitshift+0x68>)
 800198a:	4013      	ands	r3, r2
 800198c:	1d1a      	adds	r2, r3, #4
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	659a      	str	r2, [r3, #88]	; 0x58
 8001992:	e006      	b.n	80019a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <DMA_CalcBaseAndBitshift+0x68>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	aaaaaaab 	.word	0xaaaaaaab
 80019b8:	080055ac 	.word	0x080055ac
 80019bc:	fffffc00 	.word	0xfffffc00

080019c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11f      	bne.n	8001a1a <DMA_CheckFifoParam+0x5a>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d856      	bhi.n	8001a8e <DMA_CheckFifoParam+0xce>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <DMA_CheckFifoParam+0x28>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a0b 	.word	0x08001a0b
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a8f 	.word	0x08001a8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d046      	beq.n	8001a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a08:	e043      	b.n	8001a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a12:	d140      	bne.n	8001a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a18:	e03d      	b.n	8001a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d121      	bne.n	8001a68 <DMA_CheckFifoParam+0xa8>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d837      	bhi.n	8001a9a <DMA_CheckFifoParam+0xda>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x70>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a47 	.word	0x08001a47
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001a59 	.word	0x08001a59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e030      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d025      	beq.n	8001a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a56:	e022      	b.n	8001a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a60:	d11f      	bne.n	8001aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a66:	e01c      	b.n	8001aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d903      	bls.n	8001a76 <DMA_CheckFifoParam+0xb6>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d003      	beq.n	8001a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a74:	e018      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
      break;
 8001a7a:	e015      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8c:	e00b      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e00a      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e008      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e006      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e004      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e002      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	e175      	b.n	8001dc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	f040 8164 	bne.w	8001dbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d005      	beq.n	8001b0e <HAL_GPIO_Init+0x56>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d130      	bne.n	8001b70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 0201 	and.w	r2, r3, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d017      	beq.n	8001bac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d123      	bne.n	8001c00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3208      	adds	r2, #8
 8001bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3208      	adds	r2, #8
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0203 	and.w	r2, r3, #3
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80be 	beq.w	8001dbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c5a:	4a61      	ldr	r2, [pc, #388]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_GPIO_Init+0x32c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d037      	beq.n	8001cf6 <HAL_GPIO_Init+0x23e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d031      	beq.n	8001cf2 <HAL_GPIO_Init+0x23a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a56      	ldr	r2, [pc, #344]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02b      	beq.n	8001cee <HAL_GPIO_Init+0x236>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_GPIO_Init+0x338>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d025      	beq.n	8001cea <HAL_GPIO_Init+0x232>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a54      	ldr	r2, [pc, #336]	; (8001df4 <HAL_GPIO_Init+0x33c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_GPIO_Init+0x22e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a53      	ldr	r2, [pc, #332]	; (8001df8 <HAL_GPIO_Init+0x340>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d019      	beq.n	8001ce2 <HAL_GPIO_Init+0x22a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a52      	ldr	r2, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x344>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0x226>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a51      	ldr	r2, [pc, #324]	; (8001e00 <HAL_GPIO_Init+0x348>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <HAL_GPIO_Init+0x222>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_GPIO_Init+0x34c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d007      	beq.n	8001cd6 <HAL_GPIO_Init+0x21e>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	; (8001e08 <HAL_GPIO_Init+0x350>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001cce:	2309      	movs	r3, #9
 8001cd0:	e012      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	e010      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	e00e      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cda:	2307      	movs	r3, #7
 8001cdc:	e00c      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cde:	2306      	movs	r3, #6
 8001ce0:	e00a      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	e008      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_GPIO_Init+0x240>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	f002 0203 	and.w	r2, r2, #3
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	4093      	lsls	r3, r2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d08:	4935      	ldr	r1, [pc, #212]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d40:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_GPIO_Init+0x354>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	f67f ae86 	bls.w	8001ad8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40013800 	.word	0x40013800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020c00 	.word	0x40020c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021c00 	.word	0x40021c00
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40022400 	.word	0x40022400
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6413      	str	r3, [r2, #64]	; 0x40
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff f8ef 	bl	8001020 <HAL_GetTick>
 8001e42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e44:	e009      	b.n	8001e5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e46:	f7ff f8eb 	bl	8001020 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d901      	bls.n	8001e5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e022      	b.n	8001ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d1ee      	bne.n	8001e46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e74:	f7ff f8d4 	bl	8001020 <HAL_GetTick>
 8001e78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e7a:	e009      	b.n	8001e90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e7c:	f7ff f8d0 	bl	8001020 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8a:	d901      	bls.n	8001e90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e007      	b.n	8001ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e29b      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8087 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed4:	4b96      	ldr	r3, [pc, #600]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d00c      	beq.n	8001efa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee0:	4b93      	ldr	r3, [pc, #588]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d112      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62>
 8001eec:	4b90      	ldr	r3, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef8:	d10b      	bne.n	8001f12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efa:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d06c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x130>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d168      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e275      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x7a>
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a83      	ldr	r2, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e02e      	b.n	8001f88 <HAL_RCC_OscConfig+0xd8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x9c>
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b7c      	ldr	r3, [pc, #496]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7b      	ldr	r2, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e01d      	b.n	8001f88 <HAL_RCC_OscConfig+0xd8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d10c      	bne.n	8001f70 <HAL_RCC_OscConfig+0xc0>
 8001f56:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a75      	ldr	r2, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b73      	ldr	r3, [pc, #460]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a72      	ldr	r2, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0xd8>
 8001f70:	4b6f      	ldr	r3, [pc, #444]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6b      	ldr	r2, [pc, #428]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f846 	bl	8001020 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f98:	f7ff f842 	bl	8001020 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e229      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b61      	ldr	r3, [pc, #388]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0xe8>
 8001fb6:	e014      	b.n	8001fe2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f832 	bl	8001020 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f82e 	bl	8001020 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e215      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x110>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d069      	beq.n	80020c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fee:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b08      	cmp	r3, #8
 8002004:	d11c      	bne.n	8002040 <HAL_RCC_OscConfig+0x190>
 8002006:	4b4a      	ldr	r3, [pc, #296]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_RCC_OscConfig+0x17a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e1e9      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	493d      	ldr	r1, [pc, #244]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	e040      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002048:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a38      	ldr	r2, [pc, #224]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe ffe4 	bl	8001020 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe ffe0 	bl	8001020 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1c7      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4929      	ldr	r1, [pc, #164]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
 800208e:	e018      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe ffc0 	bl	8001020 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7fe ffbc 	bl	8001020 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1a3      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d038      	beq.n	8002140 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d019      	beq.n	800210a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 80020d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e2:	f7fe ff9d 	bl	8001020 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ea:	f7fe ff99 	bl	8001020 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e180      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x23a>
 8002108:	e01a      	b.n	8002140 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x280>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7fe ff83 	bl	8001020 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7fe ff7f 	bl	8001020 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d903      	bls.n	8002134 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e166      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
 8002130:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b92      	ldr	r3, [pc, #584]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ee      	bne.n	800211e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a4 	beq.w	8002296 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b89      	ldr	r3, [pc, #548]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a88      	ldr	r2, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b86      	ldr	r3, [pc, #536]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002176:	4b83      	ldr	r3, [pc, #524]	; (8002384 <HAL_RCC_OscConfig+0x4d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002182:	4b80      	ldr	r3, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x4d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7f      	ldr	r2, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x4d4>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe ff47 	bl	8001020 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7fe ff43 	bl	8001020 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e12a      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a8:	4b76      	ldr	r3, [pc, #472]	; (8002384 <HAL_RCC_OscConfig+0x4d4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x31a>
 80021bc:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	4a6f      	ldr	r2, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6713      	str	r3, [r2, #112]	; 0x70
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x376>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x33c>
 80021d2:	4b6b      	ldr	r3, [pc, #428]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a6a      	ldr	r2, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
 80021de:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a67      	ldr	r2, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x376>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x35e>
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a61      	ldr	r2, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x376>
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fef7 	bl	8001020 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fef3 	bl	8001020 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0d8      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x386>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe fee1 	bl	8001020 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fedd 	bl	8001020 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0c2      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80ae 	beq.w	80023fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d06d      	beq.n	8002388 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d14b      	bne.n	800234c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a31      	ldr	r2, [pc, #196]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe feae 	bl	8001020 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe feaa 	bl	8001020 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e091      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	491b      	ldr	r1, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fe7c 	bl	8001020 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe fe78 	bl	8001020 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e05f      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x47c>
 800234a:	e057      	b.n	80023fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7fe fe62 	bl	8001020 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fe5e 	bl	8001020 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e045      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x4b0>
 800237e:	e03d      	b.n	80023fc <HAL_RCC_OscConfig+0x54c>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002388:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <HAL_RCC_OscConfig+0x558>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d030      	beq.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d129      	bne.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d122      	bne.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d119      	bne.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10f      	bne.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0d0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d910      	bls.n	8002454 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 020f 	bic.w	r2, r3, #15
 800243a:	4965      	ldr	r1, [pc, #404]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800248e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d040      	beq.n	8002530 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e073      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06b      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4936      	ldr	r1, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002500:	f7fe fd8e 	bl	8001020 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	e00a      	b.n	800251e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002508:	f7fe fd8a 	bl	8001020 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e053      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 020c 	and.w	r2, r3, #12
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	429a      	cmp	r2, r3
 800252e:	d1eb      	bne.n	8002508 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d210      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4922      	ldr	r1, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f821 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x1cc>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1d0>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1d4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fcea 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08005594 	.word	0x08005594
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	2300      	movs	r3, #0
 80025f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fc:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d00d      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x40>
 8002608:	2b08      	cmp	r3, #8
 800260a:	f200 80bd 	bhi.w	8002788 <HAL_RCC_GetSysClockFreq+0x1a4>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 8002612:	2b04      	cmp	r3, #4
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x3a>
 8002616:	e0b7      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800261a:	60bb      	str	r3, [r7, #8]
      break;
 800261c:	e0b7      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002620:	60bb      	str	r3, [r7, #8]
      break;
 8002622:	e0b4      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002624:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800262c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04d      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	461a      	mov	r2, r3
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	ea02 0800 	and.w	r8, r2, r0
 8002652:	ea03 0901 	and.w	r9, r3, r1
 8002656:	4640      	mov	r0, r8
 8002658:	4649      	mov	r1, r9
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	014b      	lsls	r3, r1, #5
 8002664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002668:	0142      	lsls	r2, r0, #5
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	ebb0 0008 	subs.w	r0, r0, r8
 8002672:	eb61 0109 	sbc.w	r1, r1, r9
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002684:	0182      	lsls	r2, r0, #6
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	eb63 0301 	sbc.w	r3, r3, r1
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	00d9      	lsls	r1, r3, #3
 8002696:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800269a:	00d0      	lsls	r0, r2, #3
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	eb12 0208 	adds.w	r2, r2, r8
 80026a4:	eb43 0309 	adc.w	r3, r3, r9
 80026a8:	f04f 0000 	mov.w	r0, #0
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	0259      	lsls	r1, r3, #9
 80026b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026b6:	0250      	lsls	r0, r2, #9
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	f7fd fe0a 	bl	80002e0 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4613      	mov	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e04a      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	461a      	mov	r2, r3
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	ea02 0400 	and.w	r4, r2, r0
 80026ee:	ea03 0501 	and.w	r5, r3, r1
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	014b      	lsls	r3, r1, #5
 8002700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002704:	0142      	lsls	r2, r0, #5
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	1b00      	subs	r0, r0, r4
 800270c:	eb61 0105 	sbc.w	r1, r1, r5
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	018b      	lsls	r3, r1, #6
 800271a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800271e:	0182      	lsls	r2, r0, #6
 8002720:	1a12      	subs	r2, r2, r0
 8002722:	eb63 0301 	sbc.w	r3, r3, r1
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	00d9      	lsls	r1, r3, #3
 8002730:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002734:	00d0      	lsls	r0, r2, #3
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	1912      	adds	r2, r2, r4
 800273c:	eb45 0303 	adc.w	r3, r5, r3
 8002740:	f04f 0000 	mov.w	r0, #0
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	0299      	lsls	r1, r3, #10
 800274a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800274e:	0290      	lsls	r0, r2, #10
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	461a      	mov	r2, r3
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f7fd fdbe 	bl	80002e0 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4613      	mov	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	60bb      	str	r3, [r7, #8]
      break;
 8002786:	e002      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800278a:	60bb      	str	r3, [r7, #8]
      break;
 800278c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278e:	68bb      	ldr	r3, [r7, #8]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200

080027a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b03      	ldr	r3, [pc, #12]	; (80027bc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000000 	.word	0x20000000

080027c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c4:	f7ff fff0 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	0a9b      	lsrs	r3, r3, #10
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	080055a4 	.word	0x080055a4

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ec:	f7ff ffdc 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0b5b      	lsrs	r3, r3, #13
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	080055a4 	.word	0x080055a4

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a68      	ldr	r2, [pc, #416]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002842:	6093      	str	r3, [r2, #8]
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	4964      	ldr	r1, [pc, #400]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800285a:	2301      	movs	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d017      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286a:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	4959      	ldr	r1, [pc, #356]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002888:	d101      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d017      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028a6:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	494a      	ldr	r1, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c4:	d101      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 808b 	beq.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b3a      	ldr	r3, [pc, #232]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	4a39      	ldr	r2, [pc, #228]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002900:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002918:	f7fe fb82 	bl	8001020 <HAL_GetTick>
 800291c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fb7e 	bl	8001020 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e38f      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d035      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d02e      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d114      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fb46 	bl	8001020 <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fb42 	bl	8001020 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e351      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ee      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029c6:	d111      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029d6:	400b      	ands	r3, r1
 80029d8:	4901      	ldr	r1, [pc, #4]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
 80029de:	e00b      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40007000 	.word	0x40007000
 80029e8:	0ffffcff 	.word	0x0ffffcff
 80029ec:	4bb3      	ldr	r3, [pc, #716]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4ab2      	ldr	r2, [pc, #712]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	4bb0      	ldr	r3, [pc, #704]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a04:	49ad      	ldr	r1, [pc, #692]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a16:	4ba9      	ldr	r3, [pc, #676]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	4aa7      	ldr	r2, [pc, #668]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a26:	4ba5      	ldr	r3, [pc, #660]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	49a2      	ldr	r1, [pc, #648]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a44:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a52:	499a      	ldr	r1, [pc, #616]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a66:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a74:	4991      	ldr	r1, [pc, #580]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a96:	4989      	ldr	r1, [pc, #548]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aaa:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4980      	ldr	r1, [pc, #512]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002acc:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4978      	ldr	r1, [pc, #480]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af4:	f023 020c 	bic.w	r2, r3, #12
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	496f      	ldr	r1, [pc, #444]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	4967      	ldr	r1, [pc, #412]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b32:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	495e      	ldr	r1, [pc, #376]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	4956      	ldr	r1, [pc, #344]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b76:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	4945      	ldr	r1, [pc, #276]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bba:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	493c      	ldr	r1, [pc, #240]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d011      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0c:	492b      	ldr	r1, [pc, #172]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	491b      	ldr	r1, [pc, #108]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c70:	4912      	ldr	r1, [pc, #72]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c94:	4909      	ldr	r1, [pc, #36]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	e002      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	4986      	ldr	r1, [pc, #536]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cd4:	4b81      	ldr	r3, [pc, #516]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce4:	497d      	ldr	r1, [pc, #500]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d006      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80d6 	beq.w	8002eac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d00:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d0c:	f7fe f988 	bl	8001020 <HAL_GetTick>
 8002d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d14:	f7fe f984 	bl	8001020 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e195      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d021      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d46:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d54:	4b61      	ldr	r3, [pc, #388]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5a:	0e1b      	lsrs	r3, r3, #24
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	019a      	lsls	r2, r3, #6
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	4958      	ldr	r1, [pc, #352]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d004      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02e      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dac:	d129      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dae:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dbc:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	0f1b      	lsrs	r3, r3, #28
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	019a      	lsls	r2, r3, #6
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	071b      	lsls	r3, r3, #28
 8002de2:	493e      	ldr	r1, [pc, #248]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dea:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	f023 021f 	bic.w	r2, r3, #31
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	4938      	ldr	r1, [pc, #224]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d01d      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e14:	0e1b      	lsrs	r3, r3, #24
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e22:	0f1b      	lsrs	r3, r3, #28
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	019a      	lsls	r2, r3, #6
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	431a      	orrs	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	071b      	lsls	r3, r3, #28
 8002e42:	4926      	ldr	r1, [pc, #152]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d011      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	019a      	lsls	r2, r3, #6
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	061b      	lsls	r3, r3, #24
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	491a      	ldr	r1, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e86:	f7fe f8cb 	bl	8001020 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e8e:	f7fe f8c7 	bl	8001020 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0d8      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	f040 80ce 	bne.w	8003050 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eb4:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fe f8ae 	bl	8001020 <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ec8:	f7fe f8aa 	bl	8001020 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d904      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0bb      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eec:	d0ec      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d12a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f24:	4b4d      	ldr	r3, [pc, #308]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	0f1b      	lsrs	r3, r3, #28
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	019a      	lsls	r2, r3, #6
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	041b      	lsls	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	061b      	lsls	r3, r3, #24
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	071b      	lsls	r3, r3, #28
 8002f4a:	4944      	ldr	r1, [pc, #272]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	493d      	ldr	r1, [pc, #244]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f80:	d11d      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f82:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f90:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	0f1b      	lsrs	r3, r3, #28
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	019a      	lsls	r2, r3, #6
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	4929      	ldr	r1, [pc, #164]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	0e1b      	lsrs	r3, r3, #24
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fd8:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	019a      	lsls	r2, r3, #6
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	4917      	ldr	r1, [pc, #92]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4911      	ldr	r1, [pc, #68]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fd fffa 	bl	8001020 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003030:	f7fd fff6 	bl	8001020 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e007      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800304e:	d1ef      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e040      	b.n	80030f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fd30 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fc2c 	bl	80038fc <UART_SetConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e022      	b.n	80030f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fe82 	bl	8003dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 ff09 	bl	8003f04 <UART_CheckIdleState>
 80030f2:	4603      	mov	r3, r0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003110:	2b20      	cmp	r3, #32
 8003112:	f040 8081 	bne.w	8003218 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_UART_Transmit+0x26>
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e079      	b.n	800321a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_UART_Transmit+0x38>
 8003130:	2302      	movs	r3, #2
 8003132:	e072      	b.n	800321a <HAL_UART_Transmit+0x11e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2221      	movs	r2, #33	; 0x21
 8003148:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800314a:	f7fd ff69 	bl	8001020 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003168:	d108      	bne.n	800317c <HAL_UART_Transmit+0x80>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	e003      	b.n	8003184 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800318c:	e02c      	b.n	80031e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fefc 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e038      	b.n	800321a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	3302      	adds	r3, #2
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e007      	b.n	80031d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3301      	adds	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1cc      	bne.n	800318e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2200      	movs	r2, #0
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fec9 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e005      	b.n	800321a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e000      	b.n	800321a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003218:	2302      	movs	r3, #2
  }
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b08a      	sub	sp, #40	; 0x28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	4613      	mov	r3, r2
 800322e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003234:	2b20      	cmp	r3, #32
 8003236:	d13d      	bne.n	80032b4 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_Receive_DMA+0x22>
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e036      	b.n	80032b6 <HAL_UART_Receive_DMA+0x94>
    }

    __HAL_LOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_UART_Receive_DMA+0x34>
 8003252:	2302      	movs	r3, #2
 8003254:	e02f      	b.n	80032b6 <HAL_UART_Receive_DMA+0x94>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <HAL_UART_Receive_DMA+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	613b      	str	r3, [r7, #16]
   return(result);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	61bb      	str	r3, [r7, #24]
   return(result);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <HAL_UART_Receive_DMA+0x50>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 ff38 	bl	8004120 <UART_Start_Receive_DMA>
 80032b0:	4603      	mov	r3, r0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0ba      	sub	sp, #232	; 0xe8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80032ee:	4013      	ands	r3, r2
 80032f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d115      	bne.n	8003328 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 82a4 	beq.w	8003866 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
      }
      return;
 8003326:	e29e      	b.n	8003866 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003328:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8117 	beq.w	8003560 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800333e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003342:	4b85      	ldr	r3, [pc, #532]	; (8003558 <HAL_UART_IRQHandler+0x298>)
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 810a 	beq.w	8003560 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800334c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d011      	beq.n	800337c <HAL_UART_IRQHandler+0xbc>
 8003358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d011      	beq.n	80033ac <HAL_UART_IRQHandler+0xec>
 8003388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2202      	movs	r2, #2
 800339a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d011      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
 80033b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2204      	movs	r2, #4
 80033ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d2:	f043 0202 	orr.w	r2, r3, #2
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d017      	beq.n	8003418 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	f043 0208 	orr.w	r2, r3, #8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_UART_IRQHandler+0x18a>
 8003424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00c      	beq.n	800344a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 820a 	beq.w	800386a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800349a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04f      	beq.n	8003542 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 ff08 	bl	80042b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b40      	cmp	r3, #64	; 0x40
 80034b4:	d141      	bne.n	800353a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1d9      	bne.n	80034b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	2b00      	cmp	r3, #0
 8003508:	d013      	beq.n	8003532 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_UART_IRQHandler+0x29c>)
 8003510:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f842 	bl	80015a0 <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d017      	beq.n	8003552 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e00f      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9c2 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	e00b      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9be 	bl	80038bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e007      	b.n	8003552 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9ba 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003550:	e18b      	b.n	800386a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003552:	bf00      	nop
    return;
 8003554:	e189      	b.n	800386a <HAL_UART_IRQHandler+0x5aa>
 8003556:	bf00      	nop
 8003558:	04000120 	.word	0x04000120
 800355c:	08004553 	.word	0x08004553

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8144 	bne.w	80037f2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 813d 	beq.w	80037f2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8136 	beq.w	80037f2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	f040 80b2 	bne.w	8003702 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 815d 	beq.w	800386e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80035ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035be:	429a      	cmp	r2, r3
 80035c0:	f080 8155 	bcs.w	800386e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	f000 8085 	beq.w	80036e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800360a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003612:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800361e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1da      	bne.n	80035dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800364a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800364e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003652:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800365c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e1      	bne.n	8003626 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003686:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003688:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800368c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e3      	bne.n	8003662 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80036b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e4      	bne.n	80036a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd feed 	bl	80014c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8e8 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003700:	e0b5      	b.n	800386e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800370e:	b29b      	uxth	r3, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a7 	beq.w	8003872 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8003724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a2 	beq.w	8003872 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
 8003752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e4      	bne.n	800372e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3308      	adds	r3, #8
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	623b      	str	r3, [r7, #32]
   return(result);
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3308      	adds	r3, #8
 8003784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003788:	633a      	str	r2, [r7, #48]	; 0x30
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800378e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e3      	bne.n	8003764 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	69b9      	ldr	r1, [r7, #24]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	617b      	str	r3, [r7, #20]
   return(result);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e4      	bne.n	80037ae <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f870 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037f0:	e03f      	b.n	8003872 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <HAL_UART_IRQHandler+0x55c>
 80037fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003812:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f867 	bl	80038e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800381a:	e02d      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01c      	beq.n	8003876 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
    }
    return;
 8003844:	e017      	b.n	8003876 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_UART_IRQHandler+0x5b8>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fe8d 	bl	800457e <UART_EndTransmit_IT>
    return;
 8003864:	e008      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003866:	bf00      	nop
 8003868:	e006      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
    return;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
      return;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
      return;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_UART_IRQHandler+0x5b8>
    return;
 8003876:	bf00      	nop
  }

}
 8003878:	37e8      	adds	r7, #232	; 0xe8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop

08003880 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4ba7      	ldr	r3, [pc, #668]	; (8003bc4 <UART_SetConfig+0x2c8>)
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a95      	ldr	r2, [pc, #596]	; (8003bc8 <UART_SetConfig+0x2cc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d120      	bne.n	80039ba <UART_SetConfig+0xbe>
 8003978:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <UART_SetConfig+0x2d0>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d816      	bhi.n	80039b4 <UART_SetConfig+0xb8>
 8003986:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x90>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039a9 	.word	0x080039a9
 8003994:	080039a3 	.word	0x080039a3
 8003998:	080039af 	.word	0x080039af
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e14f      	b.n	8003c42 <UART_SetConfig+0x346>
 80039a2:	2302      	movs	r3, #2
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e14c      	b.n	8003c42 <UART_SetConfig+0x346>
 80039a8:	2304      	movs	r3, #4
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e149      	b.n	8003c42 <UART_SetConfig+0x346>
 80039ae:	2308      	movs	r3, #8
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e146      	b.n	8003c42 <UART_SetConfig+0x346>
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e143      	b.n	8003c42 <UART_SetConfig+0x346>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a84      	ldr	r2, [pc, #528]	; (8003bd0 <UART_SetConfig+0x2d4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d132      	bne.n	8003a2a <UART_SetConfig+0x12e>
 80039c4:	4b81      	ldr	r3, [pc, #516]	; (8003bcc <UART_SetConfig+0x2d0>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d828      	bhi.n	8003a24 <UART_SetConfig+0x128>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0xdc>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a0d 	.word	0x08003a0d
 80039dc:	08003a25 	.word	0x08003a25
 80039e0:	08003a25 	.word	0x08003a25
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a19 	.word	0x08003a19
 80039ec:	08003a25 	.word	0x08003a25
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003a25 	.word	0x08003a25
 80039f8:	08003a13 	.word	0x08003a13
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a25 	.word	0x08003a25
 8003a08:	08003a1f 	.word	0x08003a1f
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e117      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a12:	2302      	movs	r3, #2
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e114      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e111      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e10e      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a24:	2310      	movs	r3, #16
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e10b      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a69      	ldr	r2, [pc, #420]	; (8003bd4 <UART_SetConfig+0x2d8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d120      	bne.n	8003a76 <UART_SetConfig+0x17a>
 8003a34:	4b65      	ldr	r3, [pc, #404]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d013      	beq.n	8003a6a <UART_SetConfig+0x16e>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d814      	bhi.n	8003a70 <UART_SetConfig+0x174>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d009      	beq.n	8003a5e <UART_SetConfig+0x162>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d810      	bhi.n	8003a70 <UART_SetConfig+0x174>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <UART_SetConfig+0x15c>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d006      	beq.n	8003a64 <UART_SetConfig+0x168>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x174>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e0f1      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e0ee      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a64:	2304      	movs	r3, #4
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e0eb      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e0e8      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a70:	2310      	movs	r3, #16
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0e5      	b.n	8003c42 <UART_SetConfig+0x346>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <UART_SetConfig+0x2dc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d120      	bne.n	8003ac2 <UART_SetConfig+0x1c6>
 8003a80:	4b52      	ldr	r3, [pc, #328]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a8c:	d013      	beq.n	8003ab6 <UART_SetConfig+0x1ba>
 8003a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a90:	d814      	bhi.n	8003abc <UART_SetConfig+0x1c0>
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d009      	beq.n	8003aaa <UART_SetConfig+0x1ae>
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d810      	bhi.n	8003abc <UART_SetConfig+0x1c0>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <UART_SetConfig+0x1a8>
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d006      	beq.n	8003ab0 <UART_SetConfig+0x1b4>
 8003aa2:	e00b      	b.n	8003abc <UART_SetConfig+0x1c0>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e0cb      	b.n	8003c42 <UART_SetConfig+0x346>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	77fb      	strb	r3, [r7, #31]
 8003aae:	e0c8      	b.n	8003c42 <UART_SetConfig+0x346>
 8003ab0:	2304      	movs	r3, #4
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e0c5      	b.n	8003c42 <UART_SetConfig+0x346>
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e0c2      	b.n	8003c42 <UART_SetConfig+0x346>
 8003abc:	2310      	movs	r3, #16
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e0bf      	b.n	8003c42 <UART_SetConfig+0x346>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a45      	ldr	r2, [pc, #276]	; (8003bdc <UART_SetConfig+0x2e0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d125      	bne.n	8003b18 <UART_SetConfig+0x21c>
 8003acc:	4b3f      	ldr	r3, [pc, #252]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ada:	d017      	beq.n	8003b0c <UART_SetConfig+0x210>
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d817      	bhi.n	8003b12 <UART_SetConfig+0x216>
 8003ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae6:	d00b      	beq.n	8003b00 <UART_SetConfig+0x204>
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aec:	d811      	bhi.n	8003b12 <UART_SetConfig+0x216>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <UART_SetConfig+0x1fe>
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d006      	beq.n	8003b06 <UART_SetConfig+0x20a>
 8003af8:	e00b      	b.n	8003b12 <UART_SetConfig+0x216>
 8003afa:	2300      	movs	r3, #0
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e0a0      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b00:	2302      	movs	r3, #2
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e09d      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b06:	2304      	movs	r3, #4
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e09a      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e097      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b12:	2310      	movs	r3, #16
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e094      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	; (8003be0 <UART_SetConfig+0x2e4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d125      	bne.n	8003b6e <UART_SetConfig+0x272>
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b30:	d017      	beq.n	8003b62 <UART_SetConfig+0x266>
 8003b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b36:	d817      	bhi.n	8003b68 <UART_SetConfig+0x26c>
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	d00b      	beq.n	8003b56 <UART_SetConfig+0x25a>
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d811      	bhi.n	8003b68 <UART_SetConfig+0x26c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <UART_SetConfig+0x254>
 8003b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4c:	d006      	beq.n	8003b5c <UART_SetConfig+0x260>
 8003b4e:	e00b      	b.n	8003b68 <UART_SetConfig+0x26c>
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e075      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b56:	2302      	movs	r3, #2
 8003b58:	77fb      	strb	r3, [r7, #31]
 8003b5a:	e072      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e06f      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b62:	2308      	movs	r3, #8
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e06c      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e069      	b.n	8003c42 <UART_SetConfig+0x346>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1c      	ldr	r2, [pc, #112]	; (8003be4 <UART_SetConfig+0x2e8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d137      	bne.n	8003be8 <UART_SetConfig+0x2ec>
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <UART_SetConfig+0x2d0>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b86:	d017      	beq.n	8003bb8 <UART_SetConfig+0x2bc>
 8003b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b8c:	d817      	bhi.n	8003bbe <UART_SetConfig+0x2c2>
 8003b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b92:	d00b      	beq.n	8003bac <UART_SetConfig+0x2b0>
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d811      	bhi.n	8003bbe <UART_SetConfig+0x2c2>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <UART_SetConfig+0x2aa>
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba2:	d006      	beq.n	8003bb2 <UART_SetConfig+0x2b6>
 8003ba4:	e00b      	b.n	8003bbe <UART_SetConfig+0x2c2>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e04a      	b.n	8003c42 <UART_SetConfig+0x346>
 8003bac:	2302      	movs	r3, #2
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e047      	b.n	8003c42 <UART_SetConfig+0x346>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e044      	b.n	8003c42 <UART_SetConfig+0x346>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e041      	b.n	8003c42 <UART_SetConfig+0x346>
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e03e      	b.n	8003c42 <UART_SetConfig+0x346>
 8003bc4:	efff69f3 	.word	0xefff69f3
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40004800 	.word	0x40004800
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	40005000 	.word	0x40005000
 8003be0:	40011400 	.word	0x40011400
 8003be4:	40007800 	.word	0x40007800
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <UART_SetConfig+0x4b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d125      	bne.n	8003c3e <UART_SetConfig+0x342>
 8003bf2:	4b71      	ldr	r3, [pc, #452]	; (8003db8 <UART_SetConfig+0x4bc>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c00:	d017      	beq.n	8003c32 <UART_SetConfig+0x336>
 8003c02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c06:	d817      	bhi.n	8003c38 <UART_SetConfig+0x33c>
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c0c:	d00b      	beq.n	8003c26 <UART_SetConfig+0x32a>
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d811      	bhi.n	8003c38 <UART_SetConfig+0x33c>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <UART_SetConfig+0x324>
 8003c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1c:	d006      	beq.n	8003c2c <UART_SetConfig+0x330>
 8003c1e:	e00b      	b.n	8003c38 <UART_SetConfig+0x33c>
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0x346>
 8003c26:	2302      	movs	r3, #2
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e00a      	b.n	8003c42 <UART_SetConfig+0x346>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e007      	b.n	8003c42 <UART_SetConfig+0x346>
 8003c32:	2308      	movs	r3, #8
 8003c34:	77fb      	strb	r3, [r7, #31]
 8003c36:	e004      	b.n	8003c42 <UART_SetConfig+0x346>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	77fb      	strb	r3, [r7, #31]
 8003c3c:	e001      	b.n	8003c42 <UART_SetConfig+0x346>
 8003c3e:	2310      	movs	r3, #16
 8003c40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4a:	d15a      	bne.n	8003d02 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d827      	bhi.n	8003ca2 <UART_SetConfig+0x3a6>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x35c>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fda0 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003c80:	61b8      	str	r0, [r7, #24]
        break;
 8003c82:	e013      	b.n	8003cac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fdb0 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003c88:	61b8      	str	r0, [r7, #24]
        break;
 8003c8a:	e00f      	b.n	8003cac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <UART_SetConfig+0x4c0>)
 8003c8e:	61bb      	str	r3, [r7, #24]
        break;
 8003c90:	e00c      	b.n	8003cac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe fca7 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003c96:	61b8      	str	r0, [r7, #24]
        break;
 8003c98:	e008      	b.n	8003cac <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ca0:	e004      	b.n	8003cac <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	77bb      	strb	r3, [r7, #30]
        break;
 8003caa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d074      	beq.n	8003d9c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	005a      	lsls	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0f      	cmp	r3, #15
 8003ccc:	d916      	bls.n	8003cfc <UART_SetConfig+0x400>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd4:	d212      	bcs.n	8003cfc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	89fa      	ldrh	r2, [r7, #14]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e04f      	b.n	8003d9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77bb      	strb	r3, [r7, #30]
 8003d00:	e04c      	b.n	8003d9c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d828      	bhi.n	8003d5a <UART_SetConfig+0x45e>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0x414>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	08003d5b 	.word	0x08003d5b
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d5b 	.word	0x08003d5b
 8003d28:	08003d5b 	.word	0x08003d5b
 8003d2c:	08003d5b 	.word	0x08003d5b
 8003d30:	08003d53 	.word	0x08003d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d34:	f7fe fd44 	bl	80027c0 <HAL_RCC_GetPCLK1Freq>
 8003d38:	61b8      	str	r0, [r7, #24]
        break;
 8003d3a:	e013      	b.n	8003d64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fe fd54 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8003d40:	61b8      	str	r0, [r7, #24]
        break;
 8003d42:	e00f      	b.n	8003d64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <UART_SetConfig+0x4c0>)
 8003d46:	61bb      	str	r3, [r7, #24]
        break;
 8003d48:	e00c      	b.n	8003d64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7fe fc4b 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8003d4e:	61b8      	str	r0, [r7, #24]
        break;
 8003d50:	e008      	b.n	8003d64 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	61bb      	str	r3, [r7, #24]
        break;
 8003d58:	e004      	b.n	8003d64 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77bb      	strb	r3, [r7, #30]
        break;
 8003d62:	bf00      	nop
    }

    if (pclk != 0U)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d909      	bls.n	8003d98 <UART_SetConfig+0x49c>
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8a:	d205      	bcs.n	8003d98 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	e001      	b.n	8003d9c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003da8:	7fbb      	ldrb	r3, [r7, #30]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40007c00 	.word	0x40007c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	00f42400 	.word	0x00f42400

08003dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d10a      	bne.n	8003ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f14:	f7fd f884 	bl	8001020 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d10e      	bne.n	8003f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f82d 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e023      	b.n	8003f8e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d10e      	bne.n	8003f72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f817 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00d      	b.n	8003f8e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b09c      	sub	sp, #112	; 0x70
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa6:	e0a5      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	f000 80a1 	beq.w	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fd f835 	bl	8001020 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13e      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	663b      	str	r3, [r7, #96]	; 0x60
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3308      	adds	r3, #8
 8004018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800401a:	64ba      	str	r2, [r7, #72]	; 0x48
 800401c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e067      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d04f      	beq.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d147      	bne.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
 800408e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	613b      	str	r3, [r7, #16]
   return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040c0:	623a      	str	r2, [r7, #32]
 80040c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69f9      	ldr	r1, [r7, #28]
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e010      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	429a      	cmp	r2, r3
 8004110:	f43f af4a 	beq.w	8003fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3770      	adds	r7, #112	; 0x70
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b096      	sub	sp, #88	; 0x58
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	88fa      	ldrh	r2, [r7, #6]
 8004138:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2222      	movs	r2, #34	; 0x22
 8004148:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	2b00      	cmp	r3, #0
 8004150:	d02b      	beq.n	80041aa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a42      	ldr	r2, [pc, #264]	; (8004260 <UART_Start_Receive_DMA+0x140>)
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a41      	ldr	r2, [pc, #260]	; (8004264 <UART_Start_Receive_DMA+0x144>)
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a40      	ldr	r2, [pc, #256]	; (8004268 <UART_Start_Receive_DMA+0x148>)
 8004168:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	2200      	movs	r2, #0
 8004170:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3324      	adds	r3, #36	; 0x24
 800417c:	4619      	mov	r1, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	461a      	mov	r2, r3
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f7fd f93b 	bl	8001400 <HAL_DMA_Start_IT>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2210      	movs	r2, #16
 8004194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e055      	b.n	8004256 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e6      	bne.n	80041ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800420c:	637a      	str	r2, [r7, #52]	; 0x34
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3308      	adds	r3, #8
 800423e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004240:	623a      	str	r2, [r7, #32]
 8004242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	61bb      	str	r3, [r7, #24]
   return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e5      	bne.n	8004220 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3758      	adds	r7, #88	; 0x58
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	0800437f 	.word	0x0800437f
 8004264:	0800449f 	.word	0x0800449f
 8004268:	080044d7 	.word	0x080044d7

0800426c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b089      	sub	sp, #36	; 0x24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80042ac:	bf00      	nop
 80042ae:	3724      	adds	r7, #36	; 0x24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b095      	sub	sp, #84	; 0x54
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
 80042e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	61fb      	str	r3, [r7, #28]
   return(result);
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	64bb      	str	r3, [r7, #72]	; 0x48
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e5      	bne.n	80042f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800432a:	2b01      	cmp	r3, #1
 800432c:	d118      	bne.n	8004360 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60bb      	str	r3, [r7, #8]
   return(result);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004372:	bf00      	nop
 8004374:	3754      	adds	r7, #84	; 0x54
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b09c      	sub	sp, #112	; 0x70
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d070      	beq.n	8004478 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	2200      	movs	r2, #0
 800439a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80043be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e6      	bne.n	800439e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3308      	adds	r3, #8
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	667b      	str	r3, [r7, #100]	; 0x64
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043f0:	647a      	str	r2, [r7, #68]	; 0x44
 80043f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	623b      	str	r3, [r7, #32]
   return(result);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441a:	663b      	str	r3, [r7, #96]	; 0x60
 800441c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004424:	633a      	str	r2, [r7, #48]	; 0x30
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	2220      	movs	r2, #32
 800443c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	2b01      	cmp	r3, #1
 8004444:	d118      	bne.n	8004478 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	617b      	str	r3, [r7, #20]
   return(result);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004486:	4619      	mov	r1, r3
 8004488:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800448a:	f7ff fa21 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800448e:	e002      	b.n	8004496 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 8004490:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004492:	f7ff f9ff 	bl	8003894 <HAL_UART_RxCpltCallback>
}
 8004496:	bf00      	nop
 8004498:	3770      	adds	r7, #112	; 0x70
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d109      	bne.n	80044c8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7ff fa05 	bl	80038d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044c6:	e002      	b.n	80044ce <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff f9ed 	bl	80038a8 <HAL_UART_RxHalfCpltCallback>
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d109      	bne.n	8004512 <UART_DMAError+0x3c>
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b21      	cmp	r3, #33	; 0x21
 8004502:	d106      	bne.n	8004512 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800450c:	6978      	ldr	r0, [r7, #20]
 800450e:	f7ff fead 	bl	800426c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d109      	bne.n	8004534 <UART_DMAError+0x5e>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b22      	cmp	r3, #34	; 0x22
 8004524:	d106      	bne.n	8004534 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800452e:	6978      	ldr	r0, [r7, #20]
 8004530:	f7ff fec2 	bl	80042b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453a:	f043 0210 	orr.w	r2, r3, #16
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004544:	6978      	ldr	r0, [r7, #20]
 8004546:	f7ff f9b9 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff f9a3 	bl	80038bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b088      	sub	sp, #32
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	60bb      	str	r3, [r7, #8]
   return(result);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6979      	ldr	r1, [r7, #20]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	613b      	str	r3, [r7, #16]
   return(result);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e6      	bne.n	8004586 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff f95b 	bl	8003880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <__errno>:
 80045d4:	4b01      	ldr	r3, [pc, #4]	; (80045dc <__errno+0x8>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2000000c 	.word	0x2000000c

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4d0d      	ldr	r5, [pc, #52]	; (8004618 <__libc_init_array+0x38>)
 80045e4:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	2600      	movs	r6, #0
 80045ec:	42a6      	cmp	r6, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	4d0b      	ldr	r5, [pc, #44]	; (8004620 <__libc_init_array+0x40>)
 80045f2:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <__libc_init_array+0x44>)
 80045f4:	f000 ff76 	bl	80054e4 <_init>
 80045f8:	1b64      	subs	r4, r4, r5
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	2600      	movs	r6, #0
 80045fe:	42a6      	cmp	r6, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f855 3b04 	ldr.w	r3, [r5], #4
 8004608:	4798      	blx	r3
 800460a:	3601      	adds	r6, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004612:	4798      	blx	r3
 8004614:	3601      	adds	r6, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	08005654 	.word	0x08005654
 800461c:	08005654 	.word	0x08005654
 8004620:	08005654 	.word	0x08005654
 8004624:	08005658 	.word	0x08005658

08004628 <memset>:
 8004628:	4402      	add	r2, r0
 800462a:	4603      	mov	r3, r0
 800462c:	4293      	cmp	r3, r2
 800462e:	d100      	bne.n	8004632 <memset+0xa>
 8004630:	4770      	bx	lr
 8004632:	f803 1b01 	strb.w	r1, [r3], #1
 8004636:	e7f9      	b.n	800462c <memset+0x4>

08004638 <iprintf>:
 8004638:	b40f      	push	{r0, r1, r2, r3}
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <iprintf+0x2c>)
 800463c:	b513      	push	{r0, r1, r4, lr}
 800463e:	681c      	ldr	r4, [r3, #0]
 8004640:	b124      	cbz	r4, 800464c <iprintf+0x14>
 8004642:	69a3      	ldr	r3, [r4, #24]
 8004644:	b913      	cbnz	r3, 800464c <iprintf+0x14>
 8004646:	4620      	mov	r0, r4
 8004648:	f000 f866 	bl	8004718 <__sinit>
 800464c:	ab05      	add	r3, sp, #20
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	68a1      	ldr	r1, [r4, #8]
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	4620      	mov	r0, r4
 8004656:	f000 f983 	bl	8004960 <_vfiprintf_r>
 800465a:	b002      	add	sp, #8
 800465c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004660:	b004      	add	sp, #16
 8004662:	4770      	bx	lr
 8004664:	2000000c 	.word	0x2000000c

08004668 <std>:
 8004668:	2300      	movs	r3, #0
 800466a:	b510      	push	{r4, lr}
 800466c:	4604      	mov	r4, r0
 800466e:	e9c0 3300 	strd	r3, r3, [r0]
 8004672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004676:	6083      	str	r3, [r0, #8]
 8004678:	8181      	strh	r1, [r0, #12]
 800467a:	6643      	str	r3, [r0, #100]	; 0x64
 800467c:	81c2      	strh	r2, [r0, #14]
 800467e:	6183      	str	r3, [r0, #24]
 8004680:	4619      	mov	r1, r3
 8004682:	2208      	movs	r2, #8
 8004684:	305c      	adds	r0, #92	; 0x5c
 8004686:	f7ff ffcf 	bl	8004628 <memset>
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <std+0x38>)
 800468c:	6263      	str	r3, [r4, #36]	; 0x24
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <std+0x3c>)
 8004690:	62a3      	str	r3, [r4, #40]	; 0x28
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <std+0x40>)
 8004694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <std+0x44>)
 8004698:	6224      	str	r4, [r4, #32]
 800469a:	6323      	str	r3, [r4, #48]	; 0x30
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	08004f09 	.word	0x08004f09
 80046a4:	08004f2b 	.word	0x08004f2b
 80046a8:	08004f63 	.word	0x08004f63
 80046ac:	08004f87 	.word	0x08004f87

080046b0 <_cleanup_r>:
 80046b0:	4901      	ldr	r1, [pc, #4]	; (80046b8 <_cleanup_r+0x8>)
 80046b2:	f000 b8af 	b.w	8004814 <_fwalk_reent>
 80046b6:	bf00      	nop
 80046b8:	08005261 	.word	0x08005261

080046bc <__sfmoreglue>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	1e4a      	subs	r2, r1, #1
 80046c0:	2568      	movs	r5, #104	; 0x68
 80046c2:	4355      	muls	r5, r2
 80046c4:	460e      	mov	r6, r1
 80046c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046ca:	f000 f8c5 	bl	8004858 <_malloc_r>
 80046ce:	4604      	mov	r4, r0
 80046d0:	b140      	cbz	r0, 80046e4 <__sfmoreglue+0x28>
 80046d2:	2100      	movs	r1, #0
 80046d4:	e9c0 1600 	strd	r1, r6, [r0]
 80046d8:	300c      	adds	r0, #12
 80046da:	60a0      	str	r0, [r4, #8]
 80046dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80046e0:	f7ff ffa2 	bl	8004628 <memset>
 80046e4:	4620      	mov	r0, r4
 80046e6:	bd70      	pop	{r4, r5, r6, pc}

080046e8 <__sfp_lock_acquire>:
 80046e8:	4801      	ldr	r0, [pc, #4]	; (80046f0 <__sfp_lock_acquire+0x8>)
 80046ea:	f000 b8b3 	b.w	8004854 <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200002cc 	.word	0x200002cc

080046f4 <__sfp_lock_release>:
 80046f4:	4801      	ldr	r0, [pc, #4]	; (80046fc <__sfp_lock_release+0x8>)
 80046f6:	f000 b8ae 	b.w	8004856 <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200002cc 	.word	0x200002cc

08004700 <__sinit_lock_acquire>:
 8004700:	4801      	ldr	r0, [pc, #4]	; (8004708 <__sinit_lock_acquire+0x8>)
 8004702:	f000 b8a7 	b.w	8004854 <__retarget_lock_acquire_recursive>
 8004706:	bf00      	nop
 8004708:	200002c7 	.word	0x200002c7

0800470c <__sinit_lock_release>:
 800470c:	4801      	ldr	r0, [pc, #4]	; (8004714 <__sinit_lock_release+0x8>)
 800470e:	f000 b8a2 	b.w	8004856 <__retarget_lock_release_recursive>
 8004712:	bf00      	nop
 8004714:	200002c7 	.word	0x200002c7

08004718 <__sinit>:
 8004718:	b510      	push	{r4, lr}
 800471a:	4604      	mov	r4, r0
 800471c:	f7ff fff0 	bl	8004700 <__sinit_lock_acquire>
 8004720:	69a3      	ldr	r3, [r4, #24]
 8004722:	b11b      	cbz	r3, 800472c <__sinit+0x14>
 8004724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004728:	f7ff bff0 	b.w	800470c <__sinit_lock_release>
 800472c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004730:	6523      	str	r3, [r4, #80]	; 0x50
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <__sinit+0x68>)
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <__sinit+0x6c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	62a2      	str	r2, [r4, #40]	; 0x28
 800473a:	42a3      	cmp	r3, r4
 800473c:	bf04      	itt	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	61a3      	streq	r3, [r4, #24]
 8004742:	4620      	mov	r0, r4
 8004744:	f000 f820 	bl	8004788 <__sfp>
 8004748:	6060      	str	r0, [r4, #4]
 800474a:	4620      	mov	r0, r4
 800474c:	f000 f81c 	bl	8004788 <__sfp>
 8004750:	60a0      	str	r0, [r4, #8]
 8004752:	4620      	mov	r0, r4
 8004754:	f000 f818 	bl	8004788 <__sfp>
 8004758:	2200      	movs	r2, #0
 800475a:	60e0      	str	r0, [r4, #12]
 800475c:	2104      	movs	r1, #4
 800475e:	6860      	ldr	r0, [r4, #4]
 8004760:	f7ff ff82 	bl	8004668 <std>
 8004764:	68a0      	ldr	r0, [r4, #8]
 8004766:	2201      	movs	r2, #1
 8004768:	2109      	movs	r1, #9
 800476a:	f7ff ff7d 	bl	8004668 <std>
 800476e:	68e0      	ldr	r0, [r4, #12]
 8004770:	2202      	movs	r2, #2
 8004772:	2112      	movs	r1, #18
 8004774:	f7ff ff78 	bl	8004668 <std>
 8004778:	2301      	movs	r3, #1
 800477a:	61a3      	str	r3, [r4, #24]
 800477c:	e7d2      	b.n	8004724 <__sinit+0xc>
 800477e:	bf00      	nop
 8004780:	080055b4 	.word	0x080055b4
 8004784:	080046b1 	.word	0x080046b1

08004788 <__sfp>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	4607      	mov	r7, r0
 800478c:	f7ff ffac 	bl	80046e8 <__sfp_lock_acquire>
 8004790:	4b1e      	ldr	r3, [pc, #120]	; (800480c <__sfp+0x84>)
 8004792:	681e      	ldr	r6, [r3, #0]
 8004794:	69b3      	ldr	r3, [r6, #24]
 8004796:	b913      	cbnz	r3, 800479e <__sfp+0x16>
 8004798:	4630      	mov	r0, r6
 800479a:	f7ff ffbd 	bl	8004718 <__sinit>
 800479e:	3648      	adds	r6, #72	; 0x48
 80047a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	d503      	bpl.n	80047b0 <__sfp+0x28>
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	b30b      	cbz	r3, 80047f0 <__sfp+0x68>
 80047ac:	6836      	ldr	r6, [r6, #0]
 80047ae:	e7f7      	b.n	80047a0 <__sfp+0x18>
 80047b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047b4:	b9d5      	cbnz	r5, 80047ec <__sfp+0x64>
 80047b6:	4b16      	ldr	r3, [pc, #88]	; (8004810 <__sfp+0x88>)
 80047b8:	60e3      	str	r3, [r4, #12]
 80047ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047be:	6665      	str	r5, [r4, #100]	; 0x64
 80047c0:	f000 f847 	bl	8004852 <__retarget_lock_init_recursive>
 80047c4:	f7ff ff96 	bl	80046f4 <__sfp_lock_release>
 80047c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047d0:	6025      	str	r5, [r4, #0]
 80047d2:	61a5      	str	r5, [r4, #24]
 80047d4:	2208      	movs	r2, #8
 80047d6:	4629      	mov	r1, r5
 80047d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80047dc:	f7ff ff24 	bl	8004628 <memset>
 80047e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047e8:	4620      	mov	r0, r4
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ec:	3468      	adds	r4, #104	; 0x68
 80047ee:	e7d9      	b.n	80047a4 <__sfp+0x1c>
 80047f0:	2104      	movs	r1, #4
 80047f2:	4638      	mov	r0, r7
 80047f4:	f7ff ff62 	bl	80046bc <__sfmoreglue>
 80047f8:	4604      	mov	r4, r0
 80047fa:	6030      	str	r0, [r6, #0]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d1d5      	bne.n	80047ac <__sfp+0x24>
 8004800:	f7ff ff78 	bl	80046f4 <__sfp_lock_release>
 8004804:	230c      	movs	r3, #12
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	e7ee      	b.n	80047e8 <__sfp+0x60>
 800480a:	bf00      	nop
 800480c:	080055b4 	.word	0x080055b4
 8004810:	ffff0001 	.word	0xffff0001

08004814 <_fwalk_reent>:
 8004814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004818:	4606      	mov	r6, r0
 800481a:	4688      	mov	r8, r1
 800481c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004820:	2700      	movs	r7, #0
 8004822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004826:	f1b9 0901 	subs.w	r9, r9, #1
 800482a:	d505      	bpl.n	8004838 <_fwalk_reent+0x24>
 800482c:	6824      	ldr	r4, [r4, #0]
 800482e:	2c00      	cmp	r4, #0
 8004830:	d1f7      	bne.n	8004822 <_fwalk_reent+0xe>
 8004832:	4638      	mov	r0, r7
 8004834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004838:	89ab      	ldrh	r3, [r5, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d907      	bls.n	800484e <_fwalk_reent+0x3a>
 800483e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004842:	3301      	adds	r3, #1
 8004844:	d003      	beq.n	800484e <_fwalk_reent+0x3a>
 8004846:	4629      	mov	r1, r5
 8004848:	4630      	mov	r0, r6
 800484a:	47c0      	blx	r8
 800484c:	4307      	orrs	r7, r0
 800484e:	3568      	adds	r5, #104	; 0x68
 8004850:	e7e9      	b.n	8004826 <_fwalk_reent+0x12>

08004852 <__retarget_lock_init_recursive>:
 8004852:	4770      	bx	lr

08004854 <__retarget_lock_acquire_recursive>:
 8004854:	4770      	bx	lr

08004856 <__retarget_lock_release_recursive>:
 8004856:	4770      	bx	lr

08004858 <_malloc_r>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	1ccd      	adds	r5, r1, #3
 800485c:	f025 0503 	bic.w	r5, r5, #3
 8004860:	3508      	adds	r5, #8
 8004862:	2d0c      	cmp	r5, #12
 8004864:	bf38      	it	cc
 8004866:	250c      	movcc	r5, #12
 8004868:	2d00      	cmp	r5, #0
 800486a:	4606      	mov	r6, r0
 800486c:	db01      	blt.n	8004872 <_malloc_r+0x1a>
 800486e:	42a9      	cmp	r1, r5
 8004870:	d903      	bls.n	800487a <_malloc_r+0x22>
 8004872:	230c      	movs	r3, #12
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	2000      	movs	r0, #0
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487a:	f000 fda3 	bl	80053c4 <__malloc_lock>
 800487e:	4921      	ldr	r1, [pc, #132]	; (8004904 <_malloc_r+0xac>)
 8004880:	680a      	ldr	r2, [r1, #0]
 8004882:	4614      	mov	r4, r2
 8004884:	b99c      	cbnz	r4, 80048ae <_malloc_r+0x56>
 8004886:	4f20      	ldr	r7, [pc, #128]	; (8004908 <_malloc_r+0xb0>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b923      	cbnz	r3, 8004896 <_malloc_r+0x3e>
 800488c:	4621      	mov	r1, r4
 800488e:	4630      	mov	r0, r6
 8004890:	f000 fb2a 	bl	8004ee8 <_sbrk_r>
 8004894:	6038      	str	r0, [r7, #0]
 8004896:	4629      	mov	r1, r5
 8004898:	4630      	mov	r0, r6
 800489a:	f000 fb25 	bl	8004ee8 <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d123      	bne.n	80048ea <_malloc_r+0x92>
 80048a2:	230c      	movs	r3, #12
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	4630      	mov	r0, r6
 80048a8:	f000 fd92 	bl	80053d0 <__malloc_unlock>
 80048ac:	e7e3      	b.n	8004876 <_malloc_r+0x1e>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	1b5b      	subs	r3, r3, r5
 80048b2:	d417      	bmi.n	80048e4 <_malloc_r+0x8c>
 80048b4:	2b0b      	cmp	r3, #11
 80048b6:	d903      	bls.n	80048c0 <_malloc_r+0x68>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	441c      	add	r4, r3
 80048bc:	6025      	str	r5, [r4, #0]
 80048be:	e004      	b.n	80048ca <_malloc_r+0x72>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	42a2      	cmp	r2, r4
 80048c4:	bf0c      	ite	eq
 80048c6:	600b      	streq	r3, [r1, #0]
 80048c8:	6053      	strne	r3, [r2, #4]
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 fd80 	bl	80053d0 <__malloc_unlock>
 80048d0:	f104 000b 	add.w	r0, r4, #11
 80048d4:	1d23      	adds	r3, r4, #4
 80048d6:	f020 0007 	bic.w	r0, r0, #7
 80048da:	1ac2      	subs	r2, r0, r3
 80048dc:	d0cc      	beq.n	8004878 <_malloc_r+0x20>
 80048de:	1a1b      	subs	r3, r3, r0
 80048e0:	50a3      	str	r3, [r4, r2]
 80048e2:	e7c9      	b.n	8004878 <_malloc_r+0x20>
 80048e4:	4622      	mov	r2, r4
 80048e6:	6864      	ldr	r4, [r4, #4]
 80048e8:	e7cc      	b.n	8004884 <_malloc_r+0x2c>
 80048ea:	1cc4      	adds	r4, r0, #3
 80048ec:	f024 0403 	bic.w	r4, r4, #3
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d0e3      	beq.n	80048bc <_malloc_r+0x64>
 80048f4:	1a21      	subs	r1, r4, r0
 80048f6:	4630      	mov	r0, r6
 80048f8:	f000 faf6 	bl	8004ee8 <_sbrk_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d1dd      	bne.n	80048bc <_malloc_r+0x64>
 8004900:	e7cf      	b.n	80048a2 <_malloc_r+0x4a>
 8004902:	bf00      	nop
 8004904:	20000090 	.word	0x20000090
 8004908:	20000094 	.word	0x20000094

0800490c <__sfputc_r>:
 800490c:	6893      	ldr	r3, [r2, #8]
 800490e:	3b01      	subs	r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	b410      	push	{r4}
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	da08      	bge.n	800492a <__sfputc_r+0x1e>
 8004918:	6994      	ldr	r4, [r2, #24]
 800491a:	42a3      	cmp	r3, r4
 800491c:	db01      	blt.n	8004922 <__sfputc_r+0x16>
 800491e:	290a      	cmp	r1, #10
 8004920:	d103      	bne.n	800492a <__sfputc_r+0x1e>
 8004922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004926:	f000 bb33 	b.w	8004f90 <__swbuf_r>
 800492a:	6813      	ldr	r3, [r2, #0]
 800492c:	1c58      	adds	r0, r3, #1
 800492e:	6010      	str	r0, [r2, #0]
 8004930:	7019      	strb	r1, [r3, #0]
 8004932:	4608      	mov	r0, r1
 8004934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004938:	4770      	bx	lr

0800493a <__sfputs_r>:
 800493a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493c:	4606      	mov	r6, r0
 800493e:	460f      	mov	r7, r1
 8004940:	4614      	mov	r4, r2
 8004942:	18d5      	adds	r5, r2, r3
 8004944:	42ac      	cmp	r4, r5
 8004946:	d101      	bne.n	800494c <__sfputs_r+0x12>
 8004948:	2000      	movs	r0, #0
 800494a:	e007      	b.n	800495c <__sfputs_r+0x22>
 800494c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004950:	463a      	mov	r2, r7
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ffda 	bl	800490c <__sfputc_r>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d1f3      	bne.n	8004944 <__sfputs_r+0xa>
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004960 <_vfiprintf_r>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	460d      	mov	r5, r1
 8004966:	b09d      	sub	sp, #116	; 0x74
 8004968:	4614      	mov	r4, r2
 800496a:	4698      	mov	r8, r3
 800496c:	4606      	mov	r6, r0
 800496e:	b118      	cbz	r0, 8004978 <_vfiprintf_r+0x18>
 8004970:	6983      	ldr	r3, [r0, #24]
 8004972:	b90b      	cbnz	r3, 8004978 <_vfiprintf_r+0x18>
 8004974:	f7ff fed0 	bl	8004718 <__sinit>
 8004978:	4b89      	ldr	r3, [pc, #548]	; (8004ba0 <_vfiprintf_r+0x240>)
 800497a:	429d      	cmp	r5, r3
 800497c:	d11b      	bne.n	80049b6 <_vfiprintf_r+0x56>
 800497e:	6875      	ldr	r5, [r6, #4]
 8004980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004982:	07d9      	lsls	r1, r3, #31
 8004984:	d405      	bmi.n	8004992 <_vfiprintf_r+0x32>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d402      	bmi.n	8004992 <_vfiprintf_r+0x32>
 800498c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498e:	f7ff ff61 	bl	8004854 <__retarget_lock_acquire_recursive>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	071b      	lsls	r3, r3, #28
 8004996:	d501      	bpl.n	800499c <_vfiprintf_r+0x3c>
 8004998:	692b      	ldr	r3, [r5, #16]
 800499a:	b9eb      	cbnz	r3, 80049d8 <_vfiprintf_r+0x78>
 800499c:	4629      	mov	r1, r5
 800499e:	4630      	mov	r0, r6
 80049a0:	f000 fb5a 	bl	8005058 <__swsetup_r>
 80049a4:	b1c0      	cbz	r0, 80049d8 <_vfiprintf_r+0x78>
 80049a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049a8:	07dc      	lsls	r4, r3, #31
 80049aa:	d50e      	bpl.n	80049ca <_vfiprintf_r+0x6a>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b01d      	add	sp, #116	; 0x74
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <_vfiprintf_r+0x244>)
 80049b8:	429d      	cmp	r5, r3
 80049ba:	d101      	bne.n	80049c0 <_vfiprintf_r+0x60>
 80049bc:	68b5      	ldr	r5, [r6, #8]
 80049be:	e7df      	b.n	8004980 <_vfiprintf_r+0x20>
 80049c0:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <_vfiprintf_r+0x248>)
 80049c2:	429d      	cmp	r5, r3
 80049c4:	bf08      	it	eq
 80049c6:	68f5      	ldreq	r5, [r6, #12]
 80049c8:	e7da      	b.n	8004980 <_vfiprintf_r+0x20>
 80049ca:	89ab      	ldrh	r3, [r5, #12]
 80049cc:	0598      	lsls	r0, r3, #22
 80049ce:	d4ed      	bmi.n	80049ac <_vfiprintf_r+0x4c>
 80049d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d2:	f7ff ff40 	bl	8004856 <__retarget_lock_release_recursive>
 80049d6:	e7e9      	b.n	80049ac <_vfiprintf_r+0x4c>
 80049d8:	2300      	movs	r3, #0
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
 80049dc:	2320      	movs	r3, #32
 80049de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e6:	2330      	movs	r3, #48	; 0x30
 80049e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004bac <_vfiprintf_r+0x24c>
 80049ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049f0:	f04f 0901 	mov.w	r9, #1
 80049f4:	4623      	mov	r3, r4
 80049f6:	469a      	mov	sl, r3
 80049f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fc:	b10a      	cbz	r2, 8004a02 <_vfiprintf_r+0xa2>
 80049fe:	2a25      	cmp	r2, #37	; 0x25
 8004a00:	d1f9      	bne.n	80049f6 <_vfiprintf_r+0x96>
 8004a02:	ebba 0b04 	subs.w	fp, sl, r4
 8004a06:	d00b      	beq.n	8004a20 <_vfiprintf_r+0xc0>
 8004a08:	465b      	mov	r3, fp
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	4630      	mov	r0, r6
 8004a10:	f7ff ff93 	bl	800493a <__sfputs_r>
 8004a14:	3001      	adds	r0, #1
 8004a16:	f000 80aa 	beq.w	8004b6e <_vfiprintf_r+0x20e>
 8004a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a1c:	445a      	add	r2, fp
 8004a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a20:	f89a 3000 	ldrb.w	r3, [sl]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80a2 	beq.w	8004b6e <_vfiprintf_r+0x20e>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a34:	f10a 0a01 	add.w	sl, sl, #1
 8004a38:	9304      	str	r3, [sp, #16]
 8004a3a:	9307      	str	r3, [sp, #28]
 8004a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a40:	931a      	str	r3, [sp, #104]	; 0x68
 8004a42:	4654      	mov	r4, sl
 8004a44:	2205      	movs	r2, #5
 8004a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4a:	4858      	ldr	r0, [pc, #352]	; (8004bac <_vfiprintf_r+0x24c>)
 8004a4c:	f7fb fbf8 	bl	8000240 <memchr>
 8004a50:	9a04      	ldr	r2, [sp, #16]
 8004a52:	b9d8      	cbnz	r0, 8004a8c <_vfiprintf_r+0x12c>
 8004a54:	06d1      	lsls	r1, r2, #27
 8004a56:	bf44      	itt	mi
 8004a58:	2320      	movmi	r3, #32
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5e:	0713      	lsls	r3, r2, #28
 8004a60:	bf44      	itt	mi
 8004a62:	232b      	movmi	r3, #43	; 0x2b
 8004a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a68:	f89a 3000 	ldrb.w	r3, [sl]
 8004a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6e:	d015      	beq.n	8004a9c <_vfiprintf_r+0x13c>
 8004a70:	9a07      	ldr	r2, [sp, #28]
 8004a72:	4654      	mov	r4, sl
 8004a74:	2000      	movs	r0, #0
 8004a76:	f04f 0c0a 	mov.w	ip, #10
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a80:	3b30      	subs	r3, #48	; 0x30
 8004a82:	2b09      	cmp	r3, #9
 8004a84:	d94e      	bls.n	8004b24 <_vfiprintf_r+0x1c4>
 8004a86:	b1b0      	cbz	r0, 8004ab6 <_vfiprintf_r+0x156>
 8004a88:	9207      	str	r2, [sp, #28]
 8004a8a:	e014      	b.n	8004ab6 <_vfiprintf_r+0x156>
 8004a8c:	eba0 0308 	sub.w	r3, r0, r8
 8004a90:	fa09 f303 	lsl.w	r3, r9, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	46a2      	mov	sl, r4
 8004a9a:	e7d2      	b.n	8004a42 <_vfiprintf_r+0xe2>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	1d19      	adds	r1, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9103      	str	r1, [sp, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bfbb      	ittet	lt
 8004aa8:	425b      	neglt	r3, r3
 8004aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8004aae:	9307      	strge	r3, [sp, #28]
 8004ab0:	9307      	strlt	r3, [sp, #28]
 8004ab2:	bfb8      	it	lt
 8004ab4:	9204      	strlt	r2, [sp, #16]
 8004ab6:	7823      	ldrb	r3, [r4, #0]
 8004ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aba:	d10c      	bne.n	8004ad6 <_vfiprintf_r+0x176>
 8004abc:	7863      	ldrb	r3, [r4, #1]
 8004abe:	2b2a      	cmp	r3, #42	; 0x2a
 8004ac0:	d135      	bne.n	8004b2e <_vfiprintf_r+0x1ce>
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	1d1a      	adds	r2, r3, #4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	9203      	str	r2, [sp, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfb8      	it	lt
 8004ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ad2:	3402      	adds	r4, #2
 8004ad4:	9305      	str	r3, [sp, #20]
 8004ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004bbc <_vfiprintf_r+0x25c>
 8004ada:	7821      	ldrb	r1, [r4, #0]
 8004adc:	2203      	movs	r2, #3
 8004ade:	4650      	mov	r0, sl
 8004ae0:	f7fb fbae 	bl	8000240 <memchr>
 8004ae4:	b140      	cbz	r0, 8004af8 <_vfiprintf_r+0x198>
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	eba0 000a 	sub.w	r0, r0, sl
 8004aec:	fa03 f000 	lsl.w	r0, r3, r0
 8004af0:	9b04      	ldr	r3, [sp, #16]
 8004af2:	4303      	orrs	r3, r0
 8004af4:	3401      	adds	r4, #1
 8004af6:	9304      	str	r3, [sp, #16]
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	482c      	ldr	r0, [pc, #176]	; (8004bb0 <_vfiprintf_r+0x250>)
 8004afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b02:	2206      	movs	r2, #6
 8004b04:	f7fb fb9c 	bl	8000240 <memchr>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d03f      	beq.n	8004b8c <_vfiprintf_r+0x22c>
 8004b0c:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <_vfiprintf_r+0x254>)
 8004b0e:	bb1b      	cbnz	r3, 8004b58 <_vfiprintf_r+0x1f8>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	3307      	adds	r3, #7
 8004b14:	f023 0307 	bic.w	r3, r3, #7
 8004b18:	3308      	adds	r3, #8
 8004b1a:	9303      	str	r3, [sp, #12]
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	443b      	add	r3, r7
 8004b20:	9309      	str	r3, [sp, #36]	; 0x24
 8004b22:	e767      	b.n	80049f4 <_vfiprintf_r+0x94>
 8004b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b28:	460c      	mov	r4, r1
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e7a5      	b.n	8004a7a <_vfiprintf_r+0x11a>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	3401      	adds	r4, #1
 8004b32:	9305      	str	r3, [sp, #20]
 8004b34:	4619      	mov	r1, r3
 8004b36:	f04f 0c0a 	mov.w	ip, #10
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b40:	3a30      	subs	r2, #48	; 0x30
 8004b42:	2a09      	cmp	r2, #9
 8004b44:	d903      	bls.n	8004b4e <_vfiprintf_r+0x1ee>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0c5      	beq.n	8004ad6 <_vfiprintf_r+0x176>
 8004b4a:	9105      	str	r1, [sp, #20]
 8004b4c:	e7c3      	b.n	8004ad6 <_vfiprintf_r+0x176>
 8004b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b52:	4604      	mov	r4, r0
 8004b54:	2301      	movs	r3, #1
 8004b56:	e7f0      	b.n	8004b3a <_vfiprintf_r+0x1da>
 8004b58:	ab03      	add	r3, sp, #12
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <_vfiprintf_r+0x258>)
 8004b60:	a904      	add	r1, sp, #16
 8004b62:	4630      	mov	r0, r6
 8004b64:	f3af 8000 	nop.w
 8004b68:	4607      	mov	r7, r0
 8004b6a:	1c78      	adds	r0, r7, #1
 8004b6c:	d1d6      	bne.n	8004b1c <_vfiprintf_r+0x1bc>
 8004b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b70:	07d9      	lsls	r1, r3, #31
 8004b72:	d405      	bmi.n	8004b80 <_vfiprintf_r+0x220>
 8004b74:	89ab      	ldrh	r3, [r5, #12]
 8004b76:	059a      	lsls	r2, r3, #22
 8004b78:	d402      	bmi.n	8004b80 <_vfiprintf_r+0x220>
 8004b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b7c:	f7ff fe6b 	bl	8004856 <__retarget_lock_release_recursive>
 8004b80:	89ab      	ldrh	r3, [r5, #12]
 8004b82:	065b      	lsls	r3, r3, #25
 8004b84:	f53f af12 	bmi.w	80049ac <_vfiprintf_r+0x4c>
 8004b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b8a:	e711      	b.n	80049b0 <_vfiprintf_r+0x50>
 8004b8c:	ab03      	add	r3, sp, #12
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	462a      	mov	r2, r5
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <_vfiprintf_r+0x258>)
 8004b94:	a904      	add	r1, sp, #16
 8004b96:	4630      	mov	r0, r6
 8004b98:	f000 f880 	bl	8004c9c <_printf_i>
 8004b9c:	e7e4      	b.n	8004b68 <_vfiprintf_r+0x208>
 8004b9e:	bf00      	nop
 8004ba0:	080055d8 	.word	0x080055d8
 8004ba4:	080055f8 	.word	0x080055f8
 8004ba8:	080055b8 	.word	0x080055b8
 8004bac:	08005618 	.word	0x08005618
 8004bb0:	08005622 	.word	0x08005622
 8004bb4:	00000000 	.word	0x00000000
 8004bb8:	0800493b 	.word	0x0800493b
 8004bbc:	0800561e 	.word	0x0800561e

08004bc0 <_printf_common>:
 8004bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	4699      	mov	r9, r3
 8004bc8:	688a      	ldr	r2, [r1, #8]
 8004bca:	690b      	ldr	r3, [r1, #16]
 8004bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	bfb8      	it	lt
 8004bd4:	4613      	movlt	r3, r2
 8004bd6:	6033      	str	r3, [r6, #0]
 8004bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bdc:	4607      	mov	r7, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	b10a      	cbz	r2, 8004be6 <_printf_common+0x26>
 8004be2:	3301      	adds	r3, #1
 8004be4:	6033      	str	r3, [r6, #0]
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	0699      	lsls	r1, r3, #26
 8004bea:	bf42      	ittt	mi
 8004bec:	6833      	ldrmi	r3, [r6, #0]
 8004bee:	3302      	addmi	r3, #2
 8004bf0:	6033      	strmi	r3, [r6, #0]
 8004bf2:	6825      	ldr	r5, [r4, #0]
 8004bf4:	f015 0506 	ands.w	r5, r5, #6
 8004bf8:	d106      	bne.n	8004c08 <_printf_common+0x48>
 8004bfa:	f104 0a19 	add.w	sl, r4, #25
 8004bfe:	68e3      	ldr	r3, [r4, #12]
 8004c00:	6832      	ldr	r2, [r6, #0]
 8004c02:	1a9b      	subs	r3, r3, r2
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	dc26      	bgt.n	8004c56 <_printf_common+0x96>
 8004c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c0c:	1e13      	subs	r3, r2, #0
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	bf18      	it	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	0692      	lsls	r2, r2, #26
 8004c16:	d42b      	bmi.n	8004c70 <_printf_common+0xb0>
 8004c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	4638      	mov	r0, r7
 8004c20:	47c0      	blx	r8
 8004c22:	3001      	adds	r0, #1
 8004c24:	d01e      	beq.n	8004c64 <_printf_common+0xa4>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	68e5      	ldr	r5, [r4, #12]
 8004c2a:	6832      	ldr	r2, [r6, #0]
 8004c2c:	f003 0306 	and.w	r3, r3, #6
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	bf08      	it	eq
 8004c34:	1aad      	subeq	r5, r5, r2
 8004c36:	68a3      	ldr	r3, [r4, #8]
 8004c38:	6922      	ldr	r2, [r4, #16]
 8004c3a:	bf0c      	ite	eq
 8004c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c40:	2500      	movne	r5, #0
 8004c42:	4293      	cmp	r3, r2
 8004c44:	bfc4      	itt	gt
 8004c46:	1a9b      	subgt	r3, r3, r2
 8004c48:	18ed      	addgt	r5, r5, r3
 8004c4a:	2600      	movs	r6, #0
 8004c4c:	341a      	adds	r4, #26
 8004c4e:	42b5      	cmp	r5, r6
 8004c50:	d11a      	bne.n	8004c88 <_printf_common+0xc8>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e008      	b.n	8004c68 <_printf_common+0xa8>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4652      	mov	r2, sl
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	47c0      	blx	r8
 8004c60:	3001      	adds	r0, #1
 8004c62:	d103      	bne.n	8004c6c <_printf_common+0xac>
 8004c64:	f04f 30ff 	mov.w	r0, #4294967295
 8004c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6c:	3501      	adds	r5, #1
 8004c6e:	e7c6      	b.n	8004bfe <_printf_common+0x3e>
 8004c70:	18e1      	adds	r1, r4, r3
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	2030      	movs	r0, #48	; 0x30
 8004c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c7a:	4422      	add	r2, r4
 8004c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c84:	3302      	adds	r3, #2
 8004c86:	e7c7      	b.n	8004c18 <_printf_common+0x58>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	4638      	mov	r0, r7
 8004c90:	47c0      	blx	r8
 8004c92:	3001      	adds	r0, #1
 8004c94:	d0e6      	beq.n	8004c64 <_printf_common+0xa4>
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7d9      	b.n	8004c4e <_printf_common+0x8e>
	...

08004c9c <_printf_i>:
 8004c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	4691      	mov	r9, r2
 8004ca4:	7e27      	ldrb	r7, [r4, #24]
 8004ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ca8:	2f78      	cmp	r7, #120	; 0x78
 8004caa:	4680      	mov	r8, r0
 8004cac:	469a      	mov	sl, r3
 8004cae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb2:	d807      	bhi.n	8004cc4 <_printf_i+0x28>
 8004cb4:	2f62      	cmp	r7, #98	; 0x62
 8004cb6:	d80a      	bhi.n	8004cce <_printf_i+0x32>
 8004cb8:	2f00      	cmp	r7, #0
 8004cba:	f000 80d8 	beq.w	8004e6e <_printf_i+0x1d2>
 8004cbe:	2f58      	cmp	r7, #88	; 0x58
 8004cc0:	f000 80a3 	beq.w	8004e0a <_printf_i+0x16e>
 8004cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ccc:	e03a      	b.n	8004d44 <_printf_i+0xa8>
 8004cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cd2:	2b15      	cmp	r3, #21
 8004cd4:	d8f6      	bhi.n	8004cc4 <_printf_i+0x28>
 8004cd6:	a001      	add	r0, pc, #4	; (adr r0, 8004cdc <_printf_i+0x40>)
 8004cd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cdc:	08004d35 	.word	0x08004d35
 8004ce0:	08004d49 	.word	0x08004d49
 8004ce4:	08004cc5 	.word	0x08004cc5
 8004ce8:	08004cc5 	.word	0x08004cc5
 8004cec:	08004cc5 	.word	0x08004cc5
 8004cf0:	08004cc5 	.word	0x08004cc5
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004cc5 	.word	0x08004cc5
 8004cfc:	08004cc5 	.word	0x08004cc5
 8004d00:	08004cc5 	.word	0x08004cc5
 8004d04:	08004cc5 	.word	0x08004cc5
 8004d08:	08004e55 	.word	0x08004e55
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004e37 	.word	0x08004e37
 8004d14:	08004cc5 	.word	0x08004cc5
 8004d18:	08004cc5 	.word	0x08004cc5
 8004d1c:	08004e77 	.word	0x08004e77
 8004d20:	08004cc5 	.word	0x08004cc5
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004cc5 	.word	0x08004cc5
 8004d2c:	08004cc5 	.word	0x08004cc5
 8004d30:	08004e3f 	.word	0x08004e3f
 8004d34:	680b      	ldr	r3, [r1, #0]
 8004d36:	1d1a      	adds	r2, r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	600a      	str	r2, [r1, #0]
 8004d3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0a3      	b.n	8004e90 <_printf_i+0x1f4>
 8004d48:	6825      	ldr	r5, [r4, #0]
 8004d4a:	6808      	ldr	r0, [r1, #0]
 8004d4c:	062e      	lsls	r6, r5, #24
 8004d4e:	f100 0304 	add.w	r3, r0, #4
 8004d52:	d50a      	bpl.n	8004d6a <_printf_i+0xce>
 8004d54:	6805      	ldr	r5, [r0, #0]
 8004d56:	600b      	str	r3, [r1, #0]
 8004d58:	2d00      	cmp	r5, #0
 8004d5a:	da03      	bge.n	8004d64 <_printf_i+0xc8>
 8004d5c:	232d      	movs	r3, #45	; 0x2d
 8004d5e:	426d      	negs	r5, r5
 8004d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d64:	485e      	ldr	r0, [pc, #376]	; (8004ee0 <_printf_i+0x244>)
 8004d66:	230a      	movs	r3, #10
 8004d68:	e019      	b.n	8004d9e <_printf_i+0x102>
 8004d6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d6e:	6805      	ldr	r5, [r0, #0]
 8004d70:	600b      	str	r3, [r1, #0]
 8004d72:	bf18      	it	ne
 8004d74:	b22d      	sxthne	r5, r5
 8004d76:	e7ef      	b.n	8004d58 <_printf_i+0xbc>
 8004d78:	680b      	ldr	r3, [r1, #0]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	1d18      	adds	r0, r3, #4
 8004d7e:	6008      	str	r0, [r1, #0]
 8004d80:	0628      	lsls	r0, r5, #24
 8004d82:	d501      	bpl.n	8004d88 <_printf_i+0xec>
 8004d84:	681d      	ldr	r5, [r3, #0]
 8004d86:	e002      	b.n	8004d8e <_printf_i+0xf2>
 8004d88:	0669      	lsls	r1, r5, #25
 8004d8a:	d5fb      	bpl.n	8004d84 <_printf_i+0xe8>
 8004d8c:	881d      	ldrh	r5, [r3, #0]
 8004d8e:	4854      	ldr	r0, [pc, #336]	; (8004ee0 <_printf_i+0x244>)
 8004d90:	2f6f      	cmp	r7, #111	; 0x6f
 8004d92:	bf0c      	ite	eq
 8004d94:	2308      	moveq	r3, #8
 8004d96:	230a      	movne	r3, #10
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d9e:	6866      	ldr	r6, [r4, #4]
 8004da0:	60a6      	str	r6, [r4, #8]
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	bfa2      	ittt	ge
 8004da6:	6821      	ldrge	r1, [r4, #0]
 8004da8:	f021 0104 	bicge.w	r1, r1, #4
 8004dac:	6021      	strge	r1, [r4, #0]
 8004dae:	b90d      	cbnz	r5, 8004db4 <_printf_i+0x118>
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	d04d      	beq.n	8004e50 <_printf_i+0x1b4>
 8004db4:	4616      	mov	r6, r2
 8004db6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dba:	fb03 5711 	mls	r7, r3, r1, r5
 8004dbe:	5dc7      	ldrb	r7, [r0, r7]
 8004dc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dc4:	462f      	mov	r7, r5
 8004dc6:	42bb      	cmp	r3, r7
 8004dc8:	460d      	mov	r5, r1
 8004dca:	d9f4      	bls.n	8004db6 <_printf_i+0x11a>
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d10b      	bne.n	8004de8 <_printf_i+0x14c>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07df      	lsls	r7, r3, #31
 8004dd4:	d508      	bpl.n	8004de8 <_printf_i+0x14c>
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	6861      	ldr	r1, [r4, #4]
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	bfde      	ittt	le
 8004dde:	2330      	movle	r3, #48	; 0x30
 8004de0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004de4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004de8:	1b92      	subs	r2, r2, r6
 8004dea:	6122      	str	r2, [r4, #16]
 8004dec:	f8cd a000 	str.w	sl, [sp]
 8004df0:	464b      	mov	r3, r9
 8004df2:	aa03      	add	r2, sp, #12
 8004df4:	4621      	mov	r1, r4
 8004df6:	4640      	mov	r0, r8
 8004df8:	f7ff fee2 	bl	8004bc0 <_printf_common>
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d14c      	bne.n	8004e9a <_printf_i+0x1fe>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	b004      	add	sp, #16
 8004e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0a:	4835      	ldr	r0, [pc, #212]	; (8004ee0 <_printf_i+0x244>)
 8004e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	680e      	ldr	r6, [r1, #0]
 8004e14:	061f      	lsls	r7, r3, #24
 8004e16:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e1a:	600e      	str	r6, [r1, #0]
 8004e1c:	d514      	bpl.n	8004e48 <_printf_i+0x1ac>
 8004e1e:	07d9      	lsls	r1, r3, #31
 8004e20:	bf44      	itt	mi
 8004e22:	f043 0320 	orrmi.w	r3, r3, #32
 8004e26:	6023      	strmi	r3, [r4, #0]
 8004e28:	b91d      	cbnz	r5, 8004e32 <_printf_i+0x196>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	f023 0320 	bic.w	r3, r3, #32
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	2310      	movs	r3, #16
 8004e34:	e7b0      	b.n	8004d98 <_printf_i+0xfc>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	f043 0320 	orr.w	r3, r3, #32
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	2378      	movs	r3, #120	; 0x78
 8004e40:	4828      	ldr	r0, [pc, #160]	; (8004ee4 <_printf_i+0x248>)
 8004e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e46:	e7e3      	b.n	8004e10 <_printf_i+0x174>
 8004e48:	065e      	lsls	r6, r3, #25
 8004e4a:	bf48      	it	mi
 8004e4c:	b2ad      	uxthmi	r5, r5
 8004e4e:	e7e6      	b.n	8004e1e <_printf_i+0x182>
 8004e50:	4616      	mov	r6, r2
 8004e52:	e7bb      	b.n	8004dcc <_printf_i+0x130>
 8004e54:	680b      	ldr	r3, [r1, #0]
 8004e56:	6826      	ldr	r6, [r4, #0]
 8004e58:	6960      	ldr	r0, [r4, #20]
 8004e5a:	1d1d      	adds	r5, r3, #4
 8004e5c:	600d      	str	r5, [r1, #0]
 8004e5e:	0635      	lsls	r5, r6, #24
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	d501      	bpl.n	8004e68 <_printf_i+0x1cc>
 8004e64:	6018      	str	r0, [r3, #0]
 8004e66:	e002      	b.n	8004e6e <_printf_i+0x1d2>
 8004e68:	0671      	lsls	r1, r6, #25
 8004e6a:	d5fb      	bpl.n	8004e64 <_printf_i+0x1c8>
 8004e6c:	8018      	strh	r0, [r3, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	6123      	str	r3, [r4, #16]
 8004e72:	4616      	mov	r6, r2
 8004e74:	e7ba      	b.n	8004dec <_printf_i+0x150>
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	600a      	str	r2, [r1, #0]
 8004e7c:	681e      	ldr	r6, [r3, #0]
 8004e7e:	6862      	ldr	r2, [r4, #4]
 8004e80:	2100      	movs	r1, #0
 8004e82:	4630      	mov	r0, r6
 8004e84:	f7fb f9dc 	bl	8000240 <memchr>
 8004e88:	b108      	cbz	r0, 8004e8e <_printf_i+0x1f2>
 8004e8a:	1b80      	subs	r0, r0, r6
 8004e8c:	6060      	str	r0, [r4, #4]
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	6123      	str	r3, [r4, #16]
 8004e92:	2300      	movs	r3, #0
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	e7a8      	b.n	8004dec <_printf_i+0x150>
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	4632      	mov	r2, r6
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	47d0      	blx	sl
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d0ab      	beq.n	8004e00 <_printf_i+0x164>
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	079b      	lsls	r3, r3, #30
 8004eac:	d413      	bmi.n	8004ed6 <_printf_i+0x23a>
 8004eae:	68e0      	ldr	r0, [r4, #12]
 8004eb0:	9b03      	ldr	r3, [sp, #12]
 8004eb2:	4298      	cmp	r0, r3
 8004eb4:	bfb8      	it	lt
 8004eb6:	4618      	movlt	r0, r3
 8004eb8:	e7a4      	b.n	8004e04 <_printf_i+0x168>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	4640      	mov	r0, r8
 8004ec2:	47d0      	blx	sl
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d09b      	beq.n	8004e00 <_printf_i+0x164>
 8004ec8:	3501      	adds	r5, #1
 8004eca:	68e3      	ldr	r3, [r4, #12]
 8004ecc:	9903      	ldr	r1, [sp, #12]
 8004ece:	1a5b      	subs	r3, r3, r1
 8004ed0:	42ab      	cmp	r3, r5
 8004ed2:	dcf2      	bgt.n	8004eba <_printf_i+0x21e>
 8004ed4:	e7eb      	b.n	8004eae <_printf_i+0x212>
 8004ed6:	2500      	movs	r5, #0
 8004ed8:	f104 0619 	add.w	r6, r4, #25
 8004edc:	e7f5      	b.n	8004eca <_printf_i+0x22e>
 8004ede:	bf00      	nop
 8004ee0:	08005629 	.word	0x08005629
 8004ee4:	0800563a 	.word	0x0800563a

08004ee8 <_sbrk_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d06      	ldr	r5, [pc, #24]	; (8004f04 <_sbrk_r+0x1c>)
 8004eec:	2300      	movs	r3, #0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	f7fb ffd2 	bl	8000e9c <_sbrk>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d102      	bne.n	8004f02 <_sbrk_r+0x1a>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	b103      	cbz	r3, 8004f02 <_sbrk_r+0x1a>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	200002d0 	.word	0x200002d0

08004f08 <__sread>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f10:	f000 fab4 	bl	800547c <_read_r>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	bfab      	itete	ge
 8004f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f1c:	181b      	addge	r3, r3, r0
 8004f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f22:	bfac      	ite	ge
 8004f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f26:	81a3      	strhlt	r3, [r4, #12]
 8004f28:	bd10      	pop	{r4, pc}

08004f2a <__swrite>:
 8004f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	461f      	mov	r7, r3
 8004f30:	898b      	ldrh	r3, [r1, #12]
 8004f32:	05db      	lsls	r3, r3, #23
 8004f34:	4605      	mov	r5, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	4616      	mov	r6, r2
 8004f3a:	d505      	bpl.n	8004f48 <__swrite+0x1e>
 8004f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f40:	2302      	movs	r3, #2
 8004f42:	2200      	movs	r2, #0
 8004f44:	f000 f9c8 	bl	80052d8 <_lseek_r>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f52:	81a3      	strh	r3, [r4, #12]
 8004f54:	4632      	mov	r2, r6
 8004f56:	463b      	mov	r3, r7
 8004f58:	4628      	mov	r0, r5
 8004f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5e:	f000 b869 	b.w	8005034 <_write_r>

08004f62 <__sseek>:
 8004f62:	b510      	push	{r4, lr}
 8004f64:	460c      	mov	r4, r1
 8004f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f6a:	f000 f9b5 	bl	80052d8 <_lseek_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	bf15      	itete	ne
 8004f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f7e:	81a3      	strheq	r3, [r4, #12]
 8004f80:	bf18      	it	ne
 8004f82:	81a3      	strhne	r3, [r4, #12]
 8004f84:	bd10      	pop	{r4, pc}

08004f86 <__sclose>:
 8004f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f8a:	f000 b8d3 	b.w	8005134 <_close_r>
	...

08004f90 <__swbuf_r>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	460e      	mov	r6, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	4605      	mov	r5, r0
 8004f98:	b118      	cbz	r0, 8004fa2 <__swbuf_r+0x12>
 8004f9a:	6983      	ldr	r3, [r0, #24]
 8004f9c:	b90b      	cbnz	r3, 8004fa2 <__swbuf_r+0x12>
 8004f9e:	f7ff fbbb 	bl	8004718 <__sinit>
 8004fa2:	4b21      	ldr	r3, [pc, #132]	; (8005028 <__swbuf_r+0x98>)
 8004fa4:	429c      	cmp	r4, r3
 8004fa6:	d12b      	bne.n	8005000 <__swbuf_r+0x70>
 8004fa8:	686c      	ldr	r4, [r5, #4]
 8004faa:	69a3      	ldr	r3, [r4, #24]
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	071a      	lsls	r2, r3, #28
 8004fb2:	d52f      	bpl.n	8005014 <__swbuf_r+0x84>
 8004fb4:	6923      	ldr	r3, [r4, #16]
 8004fb6:	b36b      	cbz	r3, 8005014 <__swbuf_r+0x84>
 8004fb8:	6923      	ldr	r3, [r4, #16]
 8004fba:	6820      	ldr	r0, [r4, #0]
 8004fbc:	1ac0      	subs	r0, r0, r3
 8004fbe:	6963      	ldr	r3, [r4, #20]
 8004fc0:	b2f6      	uxtb	r6, r6
 8004fc2:	4283      	cmp	r3, r0
 8004fc4:	4637      	mov	r7, r6
 8004fc6:	dc04      	bgt.n	8004fd2 <__swbuf_r+0x42>
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 f948 	bl	8005260 <_fflush_r>
 8004fd0:	bb30      	cbnz	r0, 8005020 <__swbuf_r+0x90>
 8004fd2:	68a3      	ldr	r3, [r4, #8]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60a3      	str	r3, [r4, #8]
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	6022      	str	r2, [r4, #0]
 8004fde:	701e      	strb	r6, [r3, #0]
 8004fe0:	6963      	ldr	r3, [r4, #20]
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	4283      	cmp	r3, r0
 8004fe6:	d004      	beq.n	8004ff2 <__swbuf_r+0x62>
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	07db      	lsls	r3, r3, #31
 8004fec:	d506      	bpl.n	8004ffc <__swbuf_r+0x6c>
 8004fee:	2e0a      	cmp	r6, #10
 8004ff0:	d104      	bne.n	8004ffc <__swbuf_r+0x6c>
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f933 	bl	8005260 <_fflush_r>
 8004ffa:	b988      	cbnz	r0, 8005020 <__swbuf_r+0x90>
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <__swbuf_r+0x9c>)
 8005002:	429c      	cmp	r4, r3
 8005004:	d101      	bne.n	800500a <__swbuf_r+0x7a>
 8005006:	68ac      	ldr	r4, [r5, #8]
 8005008:	e7cf      	b.n	8004faa <__swbuf_r+0x1a>
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <__swbuf_r+0xa0>)
 800500c:	429c      	cmp	r4, r3
 800500e:	bf08      	it	eq
 8005010:	68ec      	ldreq	r4, [r5, #12]
 8005012:	e7ca      	b.n	8004faa <__swbuf_r+0x1a>
 8005014:	4621      	mov	r1, r4
 8005016:	4628      	mov	r0, r5
 8005018:	f000 f81e 	bl	8005058 <__swsetup_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	d0cb      	beq.n	8004fb8 <__swbuf_r+0x28>
 8005020:	f04f 37ff 	mov.w	r7, #4294967295
 8005024:	e7ea      	b.n	8004ffc <__swbuf_r+0x6c>
 8005026:	bf00      	nop
 8005028:	080055d8 	.word	0x080055d8
 800502c:	080055f8 	.word	0x080055f8
 8005030:	080055b8 	.word	0x080055b8

08005034 <_write_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	; (8005054 <_write_r+0x20>)
 8005038:	4604      	mov	r4, r0
 800503a:	4608      	mov	r0, r1
 800503c:	4611      	mov	r1, r2
 800503e:	2200      	movs	r2, #0
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fb fed9 	bl	8000dfa <_write>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_write_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_write_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	200002d0 	.word	0x200002d0

08005058 <__swsetup_r>:
 8005058:	4b32      	ldr	r3, [pc, #200]	; (8005124 <__swsetup_r+0xcc>)
 800505a:	b570      	push	{r4, r5, r6, lr}
 800505c:	681d      	ldr	r5, [r3, #0]
 800505e:	4606      	mov	r6, r0
 8005060:	460c      	mov	r4, r1
 8005062:	b125      	cbz	r5, 800506e <__swsetup_r+0x16>
 8005064:	69ab      	ldr	r3, [r5, #24]
 8005066:	b913      	cbnz	r3, 800506e <__swsetup_r+0x16>
 8005068:	4628      	mov	r0, r5
 800506a:	f7ff fb55 	bl	8004718 <__sinit>
 800506e:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <__swsetup_r+0xd0>)
 8005070:	429c      	cmp	r4, r3
 8005072:	d10f      	bne.n	8005094 <__swsetup_r+0x3c>
 8005074:	686c      	ldr	r4, [r5, #4]
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800507c:	0719      	lsls	r1, r3, #28
 800507e:	d42c      	bmi.n	80050da <__swsetup_r+0x82>
 8005080:	06dd      	lsls	r5, r3, #27
 8005082:	d411      	bmi.n	80050a8 <__swsetup_r+0x50>
 8005084:	2309      	movs	r3, #9
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	f04f 30ff 	mov.w	r0, #4294967295
 8005092:	e03e      	b.n	8005112 <__swsetup_r+0xba>
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <__swsetup_r+0xd4>)
 8005096:	429c      	cmp	r4, r3
 8005098:	d101      	bne.n	800509e <__swsetup_r+0x46>
 800509a:	68ac      	ldr	r4, [r5, #8]
 800509c:	e7eb      	b.n	8005076 <__swsetup_r+0x1e>
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <__swsetup_r+0xd8>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	bf08      	it	eq
 80050a4:	68ec      	ldreq	r4, [r5, #12]
 80050a6:	e7e6      	b.n	8005076 <__swsetup_r+0x1e>
 80050a8:	0758      	lsls	r0, r3, #29
 80050aa:	d512      	bpl.n	80050d2 <__swsetup_r+0x7a>
 80050ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ae:	b141      	cbz	r1, 80050c2 <__swsetup_r+0x6a>
 80050b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d002      	beq.n	80050be <__swsetup_r+0x66>
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 f98f 	bl	80053dc <_free_r>
 80050be:	2300      	movs	r3, #0
 80050c0:	6363      	str	r3, [r4, #52]	; 0x34
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	2300      	movs	r3, #0
 80050cc:	6063      	str	r3, [r4, #4]
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f043 0308 	orr.w	r3, r3, #8
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	b94b      	cbnz	r3, 80050f2 <__swsetup_r+0x9a>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e8:	d003      	beq.n	80050f2 <__swsetup_r+0x9a>
 80050ea:	4621      	mov	r1, r4
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 f929 	bl	8005344 <__smakebuf_r>
 80050f2:	89a0      	ldrh	r0, [r4, #12]
 80050f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050f8:	f010 0301 	ands.w	r3, r0, #1
 80050fc:	d00a      	beq.n	8005114 <__swsetup_r+0xbc>
 80050fe:	2300      	movs	r3, #0
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	6963      	ldr	r3, [r4, #20]
 8005104:	425b      	negs	r3, r3
 8005106:	61a3      	str	r3, [r4, #24]
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	b943      	cbnz	r3, 800511e <__swsetup_r+0xc6>
 800510c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005110:	d1ba      	bne.n	8005088 <__swsetup_r+0x30>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	0781      	lsls	r1, r0, #30
 8005116:	bf58      	it	pl
 8005118:	6963      	ldrpl	r3, [r4, #20]
 800511a:	60a3      	str	r3, [r4, #8]
 800511c:	e7f4      	b.n	8005108 <__swsetup_r+0xb0>
 800511e:	2000      	movs	r0, #0
 8005120:	e7f7      	b.n	8005112 <__swsetup_r+0xba>
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
 8005128:	080055d8 	.word	0x080055d8
 800512c:	080055f8 	.word	0x080055f8
 8005130:	080055b8 	.word	0x080055b8

08005134 <_close_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	; (8005150 <_close_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fb fe77 	bl	8000e32 <_close>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_close_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_close_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	200002d0 	.word	0x200002d0

08005154 <__sflush_r>:
 8005154:	898a      	ldrh	r2, [r1, #12]
 8005156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	4605      	mov	r5, r0
 800515c:	0710      	lsls	r0, r2, #28
 800515e:	460c      	mov	r4, r1
 8005160:	d458      	bmi.n	8005214 <__sflush_r+0xc0>
 8005162:	684b      	ldr	r3, [r1, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dc05      	bgt.n	8005174 <__sflush_r+0x20>
 8005168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	dc02      	bgt.n	8005174 <__sflush_r+0x20>
 800516e:	2000      	movs	r0, #0
 8005170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005176:	2e00      	cmp	r6, #0
 8005178:	d0f9      	beq.n	800516e <__sflush_r+0x1a>
 800517a:	2300      	movs	r3, #0
 800517c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005180:	682f      	ldr	r7, [r5, #0]
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	d032      	beq.n	80051ec <__sflush_r+0x98>
 8005186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	075a      	lsls	r2, r3, #29
 800518c:	d505      	bpl.n	800519a <__sflush_r+0x46>
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	1ac0      	subs	r0, r0, r3
 8005192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005194:	b10b      	cbz	r3, 800519a <__sflush_r+0x46>
 8005196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005198:	1ac0      	subs	r0, r0, r3
 800519a:	2300      	movs	r3, #0
 800519c:	4602      	mov	r2, r0
 800519e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051a0:	6a21      	ldr	r1, [r4, #32]
 80051a2:	4628      	mov	r0, r5
 80051a4:	47b0      	blx	r6
 80051a6:	1c43      	adds	r3, r0, #1
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	d106      	bne.n	80051ba <__sflush_r+0x66>
 80051ac:	6829      	ldr	r1, [r5, #0]
 80051ae:	291d      	cmp	r1, #29
 80051b0:	d82c      	bhi.n	800520c <__sflush_r+0xb8>
 80051b2:	4a2a      	ldr	r2, [pc, #168]	; (800525c <__sflush_r+0x108>)
 80051b4:	40ca      	lsrs	r2, r1
 80051b6:	07d6      	lsls	r6, r2, #31
 80051b8:	d528      	bpl.n	800520c <__sflush_r+0xb8>
 80051ba:	2200      	movs	r2, #0
 80051bc:	6062      	str	r2, [r4, #4]
 80051be:	04d9      	lsls	r1, r3, #19
 80051c0:	6922      	ldr	r2, [r4, #16]
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	d504      	bpl.n	80051d0 <__sflush_r+0x7c>
 80051c6:	1c42      	adds	r2, r0, #1
 80051c8:	d101      	bne.n	80051ce <__sflush_r+0x7a>
 80051ca:	682b      	ldr	r3, [r5, #0]
 80051cc:	b903      	cbnz	r3, 80051d0 <__sflush_r+0x7c>
 80051ce:	6560      	str	r0, [r4, #84]	; 0x54
 80051d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d2:	602f      	str	r7, [r5, #0]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	d0ca      	beq.n	800516e <__sflush_r+0x1a>
 80051d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051dc:	4299      	cmp	r1, r3
 80051de:	d002      	beq.n	80051e6 <__sflush_r+0x92>
 80051e0:	4628      	mov	r0, r5
 80051e2:	f000 f8fb 	bl	80053dc <_free_r>
 80051e6:	2000      	movs	r0, #0
 80051e8:	6360      	str	r0, [r4, #52]	; 0x34
 80051ea:	e7c1      	b.n	8005170 <__sflush_r+0x1c>
 80051ec:	6a21      	ldr	r1, [r4, #32]
 80051ee:	2301      	movs	r3, #1
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b0      	blx	r6
 80051f4:	1c41      	adds	r1, r0, #1
 80051f6:	d1c7      	bne.n	8005188 <__sflush_r+0x34>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0c4      	beq.n	8005188 <__sflush_r+0x34>
 80051fe:	2b1d      	cmp	r3, #29
 8005200:	d001      	beq.n	8005206 <__sflush_r+0xb2>
 8005202:	2b16      	cmp	r3, #22
 8005204:	d101      	bne.n	800520a <__sflush_r+0xb6>
 8005206:	602f      	str	r7, [r5, #0]
 8005208:	e7b1      	b.n	800516e <__sflush_r+0x1a>
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005210:	81a3      	strh	r3, [r4, #12]
 8005212:	e7ad      	b.n	8005170 <__sflush_r+0x1c>
 8005214:	690f      	ldr	r7, [r1, #16]
 8005216:	2f00      	cmp	r7, #0
 8005218:	d0a9      	beq.n	800516e <__sflush_r+0x1a>
 800521a:	0793      	lsls	r3, r2, #30
 800521c:	680e      	ldr	r6, [r1, #0]
 800521e:	bf08      	it	eq
 8005220:	694b      	ldreq	r3, [r1, #20]
 8005222:	600f      	str	r7, [r1, #0]
 8005224:	bf18      	it	ne
 8005226:	2300      	movne	r3, #0
 8005228:	eba6 0807 	sub.w	r8, r6, r7
 800522c:	608b      	str	r3, [r1, #8]
 800522e:	f1b8 0f00 	cmp.w	r8, #0
 8005232:	dd9c      	ble.n	800516e <__sflush_r+0x1a>
 8005234:	6a21      	ldr	r1, [r4, #32]
 8005236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005238:	4643      	mov	r3, r8
 800523a:	463a      	mov	r2, r7
 800523c:	4628      	mov	r0, r5
 800523e:	47b0      	blx	r6
 8005240:	2800      	cmp	r0, #0
 8005242:	dc06      	bgt.n	8005252 <__sflush_r+0xfe>
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	e78e      	b.n	8005170 <__sflush_r+0x1c>
 8005252:	4407      	add	r7, r0
 8005254:	eba8 0800 	sub.w	r8, r8, r0
 8005258:	e7e9      	b.n	800522e <__sflush_r+0xda>
 800525a:	bf00      	nop
 800525c:	20400001 	.word	0x20400001

08005260 <_fflush_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	690b      	ldr	r3, [r1, #16]
 8005264:	4605      	mov	r5, r0
 8005266:	460c      	mov	r4, r1
 8005268:	b913      	cbnz	r3, 8005270 <_fflush_r+0x10>
 800526a:	2500      	movs	r5, #0
 800526c:	4628      	mov	r0, r5
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	b118      	cbz	r0, 800527a <_fflush_r+0x1a>
 8005272:	6983      	ldr	r3, [r0, #24]
 8005274:	b90b      	cbnz	r3, 800527a <_fflush_r+0x1a>
 8005276:	f7ff fa4f 	bl	8004718 <__sinit>
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <_fflush_r+0x6c>)
 800527c:	429c      	cmp	r4, r3
 800527e:	d11b      	bne.n	80052b8 <_fflush_r+0x58>
 8005280:	686c      	ldr	r4, [r5, #4]
 8005282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0ef      	beq.n	800526a <_fflush_r+0xa>
 800528a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800528c:	07d0      	lsls	r0, r2, #31
 800528e:	d404      	bmi.n	800529a <_fflush_r+0x3a>
 8005290:	0599      	lsls	r1, r3, #22
 8005292:	d402      	bmi.n	800529a <_fflush_r+0x3a>
 8005294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005296:	f7ff fadd 	bl	8004854 <__retarget_lock_acquire_recursive>
 800529a:	4628      	mov	r0, r5
 800529c:	4621      	mov	r1, r4
 800529e:	f7ff ff59 	bl	8005154 <__sflush_r>
 80052a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a4:	07da      	lsls	r2, r3, #31
 80052a6:	4605      	mov	r5, r0
 80052a8:	d4e0      	bmi.n	800526c <_fflush_r+0xc>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	059b      	lsls	r3, r3, #22
 80052ae:	d4dd      	bmi.n	800526c <_fflush_r+0xc>
 80052b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b2:	f7ff fad0 	bl	8004856 <__retarget_lock_release_recursive>
 80052b6:	e7d9      	b.n	800526c <_fflush_r+0xc>
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <_fflush_r+0x70>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	d101      	bne.n	80052c2 <_fflush_r+0x62>
 80052be:	68ac      	ldr	r4, [r5, #8]
 80052c0:	e7df      	b.n	8005282 <_fflush_r+0x22>
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <_fflush_r+0x74>)
 80052c4:	429c      	cmp	r4, r3
 80052c6:	bf08      	it	eq
 80052c8:	68ec      	ldreq	r4, [r5, #12]
 80052ca:	e7da      	b.n	8005282 <_fflush_r+0x22>
 80052cc:	080055d8 	.word	0x080055d8
 80052d0:	080055f8 	.word	0x080055f8
 80052d4:	080055b8 	.word	0x080055b8

080052d8 <_lseek_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d07      	ldr	r5, [pc, #28]	; (80052f8 <_lseek_r+0x20>)
 80052dc:	4604      	mov	r4, r0
 80052de:	4608      	mov	r0, r1
 80052e0:	4611      	mov	r1, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	602a      	str	r2, [r5, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7fb fdca 	bl	8000e80 <_lseek>
 80052ec:	1c43      	adds	r3, r0, #1
 80052ee:	d102      	bne.n	80052f6 <_lseek_r+0x1e>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	b103      	cbz	r3, 80052f6 <_lseek_r+0x1e>
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	bd38      	pop	{r3, r4, r5, pc}
 80052f8:	200002d0 	.word	0x200002d0

080052fc <__swhatbuf_r>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	460e      	mov	r6, r1
 8005300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005304:	2900      	cmp	r1, #0
 8005306:	b096      	sub	sp, #88	; 0x58
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	da07      	bge.n	800531e <__swhatbuf_r+0x22>
 800530e:	2300      	movs	r3, #0
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	89b3      	ldrh	r3, [r6, #12]
 8005314:	061a      	lsls	r2, r3, #24
 8005316:	d410      	bmi.n	800533a <__swhatbuf_r+0x3e>
 8005318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531c:	e00e      	b.n	800533c <__swhatbuf_r+0x40>
 800531e:	466a      	mov	r2, sp
 8005320:	f000 f8be 	bl	80054a0 <_fstat_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	dbf2      	blt.n	800530e <__swhatbuf_r+0x12>
 8005328:	9a01      	ldr	r2, [sp, #4]
 800532a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800532e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005332:	425a      	negs	r2, r3
 8005334:	415a      	adcs	r2, r3
 8005336:	602a      	str	r2, [r5, #0]
 8005338:	e7ee      	b.n	8005318 <__swhatbuf_r+0x1c>
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	2000      	movs	r0, #0
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	b016      	add	sp, #88	; 0x58
 8005342:	bd70      	pop	{r4, r5, r6, pc}

08005344 <__smakebuf_r>:
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005348:	079d      	lsls	r5, r3, #30
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	d507      	bpl.n	8005360 <__smakebuf_r+0x1c>
 8005350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2301      	movs	r3, #1
 800535a:	6163      	str	r3, [r4, #20]
 800535c:	b002      	add	sp, #8
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	ab01      	add	r3, sp, #4
 8005362:	466a      	mov	r2, sp
 8005364:	f7ff ffca 	bl	80052fc <__swhatbuf_r>
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	4605      	mov	r5, r0
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff fa73 	bl	8004858 <_malloc_r>
 8005372:	b948      	cbnz	r0, 8005388 <__smakebuf_r+0x44>
 8005374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d4ef      	bmi.n	800535c <__smakebuf_r+0x18>
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7e3      	b.n	8005350 <__smakebuf_r+0xc>
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <__smakebuf_r+0x7c>)
 800538a:	62b3      	str	r3, [r6, #40]	; 0x28
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	6020      	str	r0, [r4, #0]
 8005390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	9b00      	ldr	r3, [sp, #0]
 8005398:	6163      	str	r3, [r4, #20]
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	6120      	str	r0, [r4, #16]
 800539e:	b15b      	cbz	r3, 80053b8 <__smakebuf_r+0x74>
 80053a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f88d 	bl	80054c4 <_isatty_r>
 80053aa:	b128      	cbz	r0, 80053b8 <__smakebuf_r+0x74>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	89a0      	ldrh	r0, [r4, #12]
 80053ba:	4305      	orrs	r5, r0
 80053bc:	81a5      	strh	r5, [r4, #12]
 80053be:	e7cd      	b.n	800535c <__smakebuf_r+0x18>
 80053c0:	080046b1 	.word	0x080046b1

080053c4 <__malloc_lock>:
 80053c4:	4801      	ldr	r0, [pc, #4]	; (80053cc <__malloc_lock+0x8>)
 80053c6:	f7ff ba45 	b.w	8004854 <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	200002c8 	.word	0x200002c8

080053d0 <__malloc_unlock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_unlock+0x8>)
 80053d2:	f7ff ba40 	b.w	8004856 <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	200002c8 	.word	0x200002c8

080053dc <_free_r>:
 80053dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053de:	2900      	cmp	r1, #0
 80053e0:	d048      	beq.n	8005474 <_free_r+0x98>
 80053e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e6:	9001      	str	r0, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f1a1 0404 	sub.w	r4, r1, #4
 80053ee:	bfb8      	it	lt
 80053f0:	18e4      	addlt	r4, r4, r3
 80053f2:	f7ff ffe7 	bl	80053c4 <__malloc_lock>
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <_free_r+0x9c>)
 80053f8:	9801      	ldr	r0, [sp, #4]
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	4615      	mov	r5, r2
 80053fe:	b933      	cbnz	r3, 800540e <_free_r+0x32>
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	6014      	str	r4, [r2, #0]
 8005404:	b003      	add	sp, #12
 8005406:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800540a:	f7ff bfe1 	b.w	80053d0 <__malloc_unlock>
 800540e:	42a3      	cmp	r3, r4
 8005410:	d90b      	bls.n	800542a <_free_r+0x4e>
 8005412:	6821      	ldr	r1, [r4, #0]
 8005414:	1862      	adds	r2, r4, r1
 8005416:	4293      	cmp	r3, r2
 8005418:	bf04      	itt	eq
 800541a:	681a      	ldreq	r2, [r3, #0]
 800541c:	685b      	ldreq	r3, [r3, #4]
 800541e:	6063      	str	r3, [r4, #4]
 8005420:	bf04      	itt	eq
 8005422:	1852      	addeq	r2, r2, r1
 8005424:	6022      	streq	r2, [r4, #0]
 8005426:	602c      	str	r4, [r5, #0]
 8005428:	e7ec      	b.n	8005404 <_free_r+0x28>
 800542a:	461a      	mov	r2, r3
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b10b      	cbz	r3, 8005434 <_free_r+0x58>
 8005430:	42a3      	cmp	r3, r4
 8005432:	d9fa      	bls.n	800542a <_free_r+0x4e>
 8005434:	6811      	ldr	r1, [r2, #0]
 8005436:	1855      	adds	r5, r2, r1
 8005438:	42a5      	cmp	r5, r4
 800543a:	d10b      	bne.n	8005454 <_free_r+0x78>
 800543c:	6824      	ldr	r4, [r4, #0]
 800543e:	4421      	add	r1, r4
 8005440:	1854      	adds	r4, r2, r1
 8005442:	42a3      	cmp	r3, r4
 8005444:	6011      	str	r1, [r2, #0]
 8005446:	d1dd      	bne.n	8005404 <_free_r+0x28>
 8005448:	681c      	ldr	r4, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	6053      	str	r3, [r2, #4]
 800544e:	4421      	add	r1, r4
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	e7d7      	b.n	8005404 <_free_r+0x28>
 8005454:	d902      	bls.n	800545c <_free_r+0x80>
 8005456:	230c      	movs	r3, #12
 8005458:	6003      	str	r3, [r0, #0]
 800545a:	e7d3      	b.n	8005404 <_free_r+0x28>
 800545c:	6825      	ldr	r5, [r4, #0]
 800545e:	1961      	adds	r1, r4, r5
 8005460:	428b      	cmp	r3, r1
 8005462:	bf04      	itt	eq
 8005464:	6819      	ldreq	r1, [r3, #0]
 8005466:	685b      	ldreq	r3, [r3, #4]
 8005468:	6063      	str	r3, [r4, #4]
 800546a:	bf04      	itt	eq
 800546c:	1949      	addeq	r1, r1, r5
 800546e:	6021      	streq	r1, [r4, #0]
 8005470:	6054      	str	r4, [r2, #4]
 8005472:	e7c7      	b.n	8005404 <_free_r+0x28>
 8005474:	b003      	add	sp, #12
 8005476:	bd30      	pop	{r4, r5, pc}
 8005478:	20000090 	.word	0x20000090

0800547c <_read_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	; (800549c <_read_r+0x20>)
 8005480:	4604      	mov	r4, r0
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	2200      	movs	r2, #0
 8005488:	602a      	str	r2, [r5, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	f7fb fc98 	bl	8000dc0 <_read>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d102      	bne.n	800549a <_read_r+0x1e>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	b103      	cbz	r3, 800549a <_read_r+0x1e>
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	bd38      	pop	{r3, r4, r5, pc}
 800549c:	200002d0 	.word	0x200002d0

080054a0 <_fstat_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d07      	ldr	r5, [pc, #28]	; (80054c0 <_fstat_r+0x20>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	f7fb fccc 	bl	8000e4a <_fstat>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d102      	bne.n	80054bc <_fstat_r+0x1c>
 80054b6:	682b      	ldr	r3, [r5, #0]
 80054b8:	b103      	cbz	r3, 80054bc <_fstat_r+0x1c>
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	bf00      	nop
 80054c0:	200002d0 	.word	0x200002d0

080054c4 <_isatty_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d06      	ldr	r5, [pc, #24]	; (80054e0 <_isatty_r+0x1c>)
 80054c8:	2300      	movs	r3, #0
 80054ca:	4604      	mov	r4, r0
 80054cc:	4608      	mov	r0, r1
 80054ce:	602b      	str	r3, [r5, #0]
 80054d0:	f7fb fccb 	bl	8000e6a <_isatty>
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	d102      	bne.n	80054de <_isatty_r+0x1a>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	b103      	cbz	r3, 80054de <_isatty_r+0x1a>
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	bd38      	pop	{r3, r4, r5, pc}
 80054e0:	200002d0 	.word	0x200002d0

080054e4 <_init>:
 80054e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e6:	bf00      	nop
 80054e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ea:	bc08      	pop	{r3}
 80054ec:	469e      	mov	lr, r3
 80054ee:	4770      	bx	lr

080054f0 <_fini>:
 80054f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f2:	bf00      	nop
 80054f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f6:	bc08      	pop	{r3}
 80054f8:	469e      	mov	lr, r3
 80054fa:	4770      	bx	lr
